import requests
from typing import List, Dict
from loguru import logger


def check_relevance_with_flowise(article: Dict[str, str], flow_id: str, flowise_host: str) -> Dict[str, any]:
    url = f"{flowise_host}/api/v1/prediction/{flow_id}"

    filter_prompt = f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {article.get('title', '')} –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {article.get('summary', '')}"

    payload = {"question": filter_prompt}

    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()

        result_text = response.json().get("text", "").strip()

        # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"üì• –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Flowise –¥–ª—è '{article.get('title', '')[:50]}...': {result_text[:500]}...")

        import json
        import re

        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown –±–ª–æ–∫–æ–≤
        clean_text = result_text
        if "```json" in result_text:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ markdown –±–ª–æ–∫–∞
            json_match = re.search(r'```json\s*(\{.*?\})\s*```', result_text, re.DOTALL)
            if json_match:
                clean_text = json_match.group(1)
                logger.debug(f"üìÑ –ò–∑–≤–ª–µ—á–µ–Ω JSON –∏–∑ markdown –±–ª–æ–∫–∞: {clean_text[:200]}...")
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ —Ç–µ–∫—Å—Ç–µ –±–µ–∑ markdown –±–ª–æ–∫–æ–≤
            json_match = re.search(r'\{.*\}', result_text, re.DOTALL)
            if json_match:
                clean_text = json_match.group(0)
                logger.debug(f"üìÑ –ù–∞–π–¥–µ–Ω JSON –≤ —Ç–µ–∫—Å—Ç–µ: {clean_text[:200]}...")

        try:
            result = json.loads(clean_text)

            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
            return {
                'is_relevant': result.get('is_relevant', False),
                'relevance_reason': result.get('relevance_reason', '–ù–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è'),
                'interest_score': result.get('interest_score', 0),
                'interest_reason': result.get('interest_reason', '–ù–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è'),
                'content_type': result.get('content_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'summary': result.get('summary', ''),
                'title_ru': result.get('title_ru', ''),
                'url': result.get('url', article.get('url', ''))
            }
        except json.JSONDecodeError as e:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç –¥–ª—è '{article.get('title', '')[:50]}...': {e}")
            logger.warning(f"üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {result_text[:1000]}...")
            logger.warning(f"üßπ –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {clean_text[:1000]}...")
            return {
                'is_relevant': False,
                'relevance_reason': f'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)[:100]}',
                'interest_score': 0,
                'interest_reason': '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞',
                'content_type': '–û—à–∏–±–∫–∞',
                'summary': '',
                'title_ru': '',
                'url': article.get('url', '')
            }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Flowise: {e}")
        return {
            'is_relevant': False,
            'relevance_reason': '–û—à–∏–±–∫–∞ API',
            'interest_score': 0,
            'interest_reason': '–û—à–∏–±–∫–∞ API',
            'content_type': '–û—à–∏–±–∫–∞',
            'summary': '',
            'title_ru': '',
            'url': article.get('url', '')
        }


def filter_news_with_flowise(articles: List[Dict[str, str]],
                            flow_id: str,
                            flowise_host: str) -> List[Dict[str, str]]:

    filtered_articles = []

    for article in articles:
        relevance_check = check_relevance_with_flowise(article, flow_id, flowise_host)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫ —Å—Ç–∞—Ç—å–µ
        article_with_meta = article.copy()
        article_with_meta['filter_result'] = relevance_check

        if relevance_check['is_relevant']:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if relevance_check['title_ru']:
                article_with_meta['title'] = relevance_check['title_ru']
            if relevance_check['summary']:
                article_with_meta['summary'] = relevance_check['summary']

            article_with_meta['content_type'] = relevance_check['content_type']
            article_with_meta['interest_score'] = relevance_check['interest_score']

            filtered_articles.append(article_with_meta)
            logger.debug(f"‚úì –°—Ç–∞—Ç—å—è –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä: {article['title'][:50]}... (–û—Ü–µ–Ω–∫–∞: {relevance_check['interest_score']}/10, –¢–∏–ø: {relevance_check['content_type']})")
        else:
            logger.debug(f"‚úó –°—Ç–∞—Ç—å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {article['title'][:50]}... –ü—Ä–∏—á–∏–Ω–∞: {relevance_check['relevance_reason']}")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—Ü–µ–Ω–∫–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ (–æ—Ç –≤—ã—Å–æ–∫–æ–π –∫ –Ω–∏–∑–∫–æ–π)
    filtered_articles.sort(key=lambda x: x.get('interest_score', 0), reverse=True)

    logger.info(f"üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç–∏ (–æ—Ç {filtered_articles[0].get('interest_score', 0)}/10 –¥–æ {filtered_articles[-1].get('interest_score', 0)}/10)" if filtered_articles else "")

    return filtered_articles


def get_all_articles_with_filter_results(articles: List[Dict[str, str]],
                                        flow_id: str,
                                        flowise_host: str) -> List[Dict[str, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å—Ç–∞—Ç—å–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∞—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ).

    Args:
        articles: –ò—Å—Ö–æ–¥–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
        flow_id: ID –ø–æ—Ç–æ–∫–∞ Flowise
        flowise_host: –•–æ—Å—Ç Flowise

    Returns:
        List[Dict]: –í—Å–µ —Å—Ç–∞—Ç—å–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """
    articles_with_results = []

    for article in articles:
        relevance_check = check_relevance_with_flowise(article, flow_id, flowise_host)

        article_with_meta = article.copy()
        article_with_meta['filter_result'] = relevance_check

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if relevance_check['title_ru']:
            article_with_meta['title_filtered'] = relevance_check['title_ru']
        if relevance_check['summary']:
            article_with_meta['summary_filtered'] = relevance_check['summary']

        article_with_meta['content_type'] = relevance_check['content_type']
        article_with_meta['interest_score'] = relevance_check['interest_score']

        articles_with_results.append(article_with_meta)

        if relevance_check['is_relevant']:
            logger.debug(f"‚úì –°—Ç–∞—Ç—å—è –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä: {article['title'][:50]}... (–û—Ü–µ–Ω–∫–∞: {relevance_check['interest_score']}/10)")
        else:
            logger.debug(f"‚úó –°—Ç–∞—Ç—å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {article['title'][:50]}... –ü—Ä–∏—á–∏–Ω–∞: {relevance_check['relevance_reason']}")

    return articles_with_results