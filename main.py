#!/usr/bin/env python3
"""
–û—Ç–¥–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ pipeline SMM Agents.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:
1. Scout - —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS –ª–µ–Ω—Ç –∏ Google Custom Search
2. Filter - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Flowise
3. Copywriter - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
4. Image Generator - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ OpenAI DALL-E

–ó–∞–ø—É—Å–∫: python run_pipeline.py
"""

import sys
from pathlib import Path
from typing import List, Dict
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from agents.pipeline import run_news_pipeline_with_tracking
from config import settings
from email_sender import send_email_notification, validate_email_configuration
from logger.logger import setup_logger

logger = setup_logger(module_name=__name__)


def print_banner():
    """–ü–µ—á–∞—Ç–∞–µ—Ç –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        üêç PYTHON DIGEST                          ‚ïë
‚ïë                    Automated Content Pipeline                    ‚ïë
‚ïë                                                                  ‚ïë
‚ïë  Scout ‚Üí Filter ‚Üí Copywriter ‚Üí Image Generator ‚Üí Email           ‚ïë
‚ïë                                                                  ‚ïë
‚ïë           –î–ª—è Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ‚Ä¢ –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
    print(banner)


def validate_configuration() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º pipeline.

    Returns:
        bool: True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
    """
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    required_settings = {
        "flowise_host": settings.flowise_host,
        "flowise_filter_id": settings.flowise_filter_id,
        "flowise_copywriter_id": settings.flowise_copywriter_id,
    }

    missing = []
    for key, value in required_settings.items():
        if not value:
            missing.append(key)

    if missing:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {', '.join(missing)}")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    has_google = (
        settings.enable_google_news
        and settings.google_api_key
        and settings.google_cse_id
    )
    has_rss = settings.enable_rss_news

    if not has_google and not has_rss:
        logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∏ –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π!")
        logger.error(
            "   - –î–ª—è Google News –Ω—É–∂–Ω—ã: GOOGLE_API_KEY, GOOGLE_CSE_ID, ENABLE_GOOGLE_NEWS=True"
        )
        logger.error("   - –î–ª—è RSS –Ω—É–∂–Ω–æ: ENABLE_RSS_NEWS=True")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if settings.generate_images and not settings.openai_api_key:
        logger.warning("‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–∞, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω OPENAI_API_KEY")
        logger.warning("   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email
    if not validate_email_configuration():
        return False

    logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    return True


def print_configuration_summary():
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    logger.info("üìã –°–≤–æ–¥–∫–∞ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    logger.info(f"   ‚Ä¢ Flowise Host: {settings.flowise_host}")

    # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    sources = []
    if (
        settings.enable_google_news
        and settings.google_api_key
        and settings.google_cse_id
    ):
        sources.append("Google Custom Search")
    if settings.enable_rss_news:
        sources.append(f"RSS (–ø–µ—Ä–∏–æ–¥: {settings.rss_hours_period}—á)")

    logger.info(f"   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {', '.join(sources) if sources else '–ù–ï–¢'}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if settings.generate_images and settings.openai_api_key:
        logger.info("   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ‚úÖ –≤–∫–ª—é—á–µ–Ω–∞ (OpenAI DALL-E)")
    else:
        logger.info("   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ‚ùå –æ—Ç–∫–ª—é—á–µ–Ω–∞")

    # Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if settings.enable_email_sending and settings.email_recipients:
        logger.info(
            f"   ‚Ä¢ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ –≤–∫–ª—é—á–µ–Ω—ã ({len(settings.email_recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)"
        )
    else:
        logger.info("   ‚Ä¢ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚ùå –æ—Ç–∫–ª—é—á–µ–Ω—ã")


def get_default_keywords() -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ Python-–∫–æ–Ω—Ç–µ–Ω—Ç–∞.

    Returns:
        List[str]: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    """
    return [
        "Python",
        "Django",
        "Flask",
        "FastAPI",
        "pandas",
        "numpy",
        "pytest",
        "asyncio",
        "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ Python",
        "Python —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
        "Python –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
        "Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∏",
        "Python —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏",
        "Python –æ–±—É—á–µ–Ω–∏–µ",
        "Python –º–µ–º—ã",
        "Python –∏—Å—Ç–æ—Ä–∏—è",
    ]


def get_default_rss_feeds() -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ RSS –ª–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Python –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

    Returns:
        List[str]: RSS –ª–µ–Ω—Ç—ã
    """
    return [
        # Python-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        "https://habr.com/ru/rss/hub/python/",
        "https://habr.com/ru/rss/hub/django/",
        "https://habr.com/ru/rss/all/all/?fl=ru",
        "https://tproger.ru/feed/",
        "https://realpython.com/atom.xml",
        "https://pythondigest.ru/rss/",
        "https://planetpython.org/rss20.xml",
        "https://pyfound.blogspot.com/feeds/posts/default",
        "https://www.blog.pythonlibrary.org/feed/",
        # GitHub –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
        "https://github.blog/feed/",
        "https://stackoverflow.com/feeds/tag?tagnames=python&sort=newest",
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        "https://hynek.me/articles/atom.xml",
        "https://hackaday.com/feed/",
        # Reddit Python —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã RSS)
        # "https://www.reddit.com/r/Python/.rss",
        # "https://www.reddit.com/r/learnpython/.rss",
    ]


def create_image_config() -> Dict:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

    Returns:
        Dict: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    return {
        "enabled": settings.generate_images and bool(settings.openai_api_key),
        "openai_api_key": settings.openai_api_key,
    }


def save_results_summary(results: List[Dict[str, str]], output_dir: Path):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

    Args:
        results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã pipeline
        output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    if not results:
        return

    summary_file = (
        output_dir / f"summary_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    )

    with open(summary_file, "w", encoding="utf-8") as f:
        f.write("Python Digest Pipeline Summary\n")
        f.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"Total posts: {len(results)}\n")
        f.write("=" * 50 + "\n\n")

        for idx, post in enumerate(results, 1):
            f.write(f"{idx}. {post['title']}\n")
            f.write(f"   URL: {post['url']}\n")
            f.write(f"   Has image: {'Yes' if post.get('image_path') else 'No'}\n")
            f.write(f"   Post length: {len(post.get('post_content', ''))} chars\n")
            f.write("\n")

    logger.info(f"üìÑ –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {summary_file}")


def save_comprehensive_report(
    all_news: List[Dict[str, str]],
    filtered_news: List[Dict[str, str]],
    final_posts: List[Dict[str, str]],
    output_dir: Path,
    timestamp: str,
):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ –≤—Å–µ–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.

    Args:
        all_news: –í—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (Scout)
        filtered_news: –ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ—à–µ–¥—à–∏–µ —Ñ–∏–ª—å—Ç—Ä (Filter)
        final_posts: –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (Copywriter)
        output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        timestamp: –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
    """
    report_file = output_dir / f"comprehensive_report_{timestamp}.md"

    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ URL –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    filtered_urls = {news["url"] for news in filtered_news}
    final_urls = {post["url"] for post in final_posts}

    with open(report_file, "w", encoding="utf-8") as f:
        f.write("# üêç Python Digest - –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç\n\n")
        f.write(
            f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        f.write("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n")
        f.write(f"- **–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π:** {len(all_news)}\n")
        f.write(
            f"- **–ü—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é:** {len(filtered_news)} ({len(filtered_news) / len(all_news) * 100:.1f}%)\n"
            if all_news
            else ""
        )
        f.write(f"- **–í—ã–±—Ä–∞–Ω–æ –¢–û–ü-8 —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö:** {min(8, len(filtered_news))}\n")
        f.write(f"- **–°–æ–∑–¥–∞–Ω–æ –ø–æ—Å—Ç–æ–≤:** {len(final_posts)}\n")
        f.write(f"- **–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–º:** {len(all_news) - len(filtered_news)}\n\n")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
        if filtered_news:
            top_score = max(
                (
                    news.get("filter_result", {}).get("interest_score", 0)
                    for news in filtered_news
                ),
                default=0,
            )
            bottom_score = min(
                (
                    news.get("filter_result", {}).get("interest_score", 0)
                    for news in filtered_news
                ),
                default=0,
            )
            f.write(
                f"**üìà –î–∏–∞–ø–∞–∑–æ–Ω –æ—Ü–µ–Ω–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π:** {bottom_score}/10 - {top_score}/10\n\n"
            )

        if final_posts:
            final_scores = [post.get("interest_score", 0) for post in final_posts]
            if final_scores:
                f.write(
                    f"**‚≠ê –û—Ü–µ–Ω–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:** {max(final_scores)}/10 - {min(final_scores)}/10 (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é)\n\n"
                )

        # –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å —Å—Ç–∞—Ç—É—Å–∞–º–∏
        f.write("## üìã –í—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n\n")
        f.write(
            "| # | –°—Ç–∞—Ç—É—Å | –û—Ü–µ–Ω–∫–∞ | –¢–∏–ø | –ò—Å—Ç–æ—á–Ω–∏–∫ | –ó–∞–≥–æ–ª–æ–≤–æ–∫ | –ü—Ä–∏—á–∏–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ | URL |\n"
        )
        f.write(
            "|---|--------|--------|-----|----------|-----------|-------------------|-----|\n"
        )

        for idx, news in enumerate(all_news, 1):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if news["url"] in final_urls:
                status = "‚úÖ **–û–ü–£–ë–õ–ò–ö–û–í–ê–ù**"
            elif news["url"] in filtered_urls:
                status = "üîÑ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω"
            else:
                status = "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω"

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            filter_result = news.get("filter_result", {})
            interest_score = filter_result.get("interest_score", 0)
            content_type = filter_result.get("content_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            relevance_reason = filter_result.get("relevance_reason", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            interest_reason = filter_result.get("interest_reason", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            if filter_result.get("is_relevant"):
                filter_reason = f"‚úÖ {relevance_reason} | üéØ {interest_reason}"
            else:
                filter_reason = f"‚ùå {relevance_reason}"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
            source = news.get("source", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

            # –û–±—Ä–µ–∑–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            title = (
                news["title"][:80] + "..." if len(news["title"]) > 80 else news["title"]
            )
            title = title.replace(
                "|", "\\|"
            )  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –¥–ª—è Markdown

            # –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏—á–∏–Ω—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            filter_reason = (
                filter_reason[:100] + "..."
                if len(filter_reason) > 100
                else filter_reason
            )
            filter_reason = filter_reason.replace("|", "\\|")

            f.write(
                f"| {idx} | {status} | {interest_score}/10 | {content_type} | {source} | {title} | {filter_reason} | [–°—Å—ã–ª–∫–∞]({news['url']}) |\n"
            )

        f.write("\n")

        # –¢–û–ü-8 —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        if final_posts:
            f.write(
                "## üèÜ –¢–û–ü-8 —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∏–Ω—Ç–µ—Ä–µ—Å–∞)\n\n"
            )
            for idx, post in enumerate(final_posts, 1):
                interest_score = post.get("interest_score", 0)
                content_type = post.get("content_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                interest_reason = post.get("filter_result", {}).get(
                    "interest_reason", "–ù–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"
                )

                f.write(f"### {idx}. {post['title']} `[{interest_score}/10]`\n\n")
                f.write(f"**üîó URL:** {post['url']}\n\n")
                f.write(f"**üìä –û—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞:** {interest_score}/10\n\n")
                f.write(f"**üìö –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:** {content_type}\n\n")
                f.write(f"**üéØ –ü–æ—á–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:** {interest_reason}\n\n")

                if post.get("summary"):
                    f.write(f"**üìù –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** {post['summary']}\n\n")

                if post.get("post_content"):
                    f.write(
                        f"**‚úçÔ∏è –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:**\n```\n{post['post_content']}\n```\n\n"
                    )

                if post.get("image_path"):
                    f.write(f"**üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:** {post['image_path']}\n\n")

                f.write("---\n\n")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ü–µ–Ω–∫–∞–º —Ñ–∏–ª—å—Ç—Ä–∞
        f.write("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ü–µ–Ω–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞\n\n")
        scores = [
            news.get("filter_result", {}).get("interest_score", 0) for news in all_news
        ]
        avg_score = sum(scores) / len(scores) if scores else 0
        high_scores = len([s for s in scores if s >= 8])
        medium_scores = len([s for s in scores if 5 <= s < 8])
        low_scores = len([s for s in scores if s < 5])

        f.write(f"- **–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞:** {avg_score:.1f}/10\n")
        f.write(f"- **–í—ã—Å–æ–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ (8-10):** {high_scores}\n")
        f.write(f"- **–°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ (5-7):** {medium_scores}\n")
        f.write(f"- **–ù–∏–∑–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ (0-4):** {low_scores}\n\n")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        f.write("## üìö –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n")
        content_types = {}
        for news in all_news:
            content_type = news.get("filter_result", {}).get(
                "content_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            )
            content_types[content_type] = content_types.get(content_type, 0) + 1

        f.write("| –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ |\n")
        f.write("|--------------|------------|\n")
        for content_type, count in sorted(
            content_types.items(), key=lambda x: x[1], reverse=True
        ):
            f.write(f"| {content_type} | {count} |\n")
        f.write("\n")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        f.write("## üì° –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º\n\n")
        source_stats = {}
        for news in all_news:
            source = news.get("source", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            if source not in source_stats:
                source_stats[source] = {
                    "total": 0,
                    "filtered": 0,
                    "published": 0,
                    "avg_score": 0,
                }
            source_stats[source]["total"] += 1
            if news["url"] in filtered_urls:
                source_stats[source]["filtered"] += 1
            if news["url"] in final_urls:
                source_stats[source]["published"] += 1

            # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–µ
            score = news.get("filter_result", {}).get("interest_score", 0)
            source_stats[source]["avg_score"] += score

        f.write(
            "| –ò—Å—Ç–æ—á–Ω–∏–∫ | –°–æ–±—Ä–∞–Ω–æ | –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ | –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ | –°—Ä. –æ—Ü–µ–Ω–∫–∞ | –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å |\n"
        )
        f.write(
            "|----------|---------|---------------|--------------|------------|---------------|\n"
        )

        for source, stats in sorted(source_stats.items()):
            efficiency = (
                (stats["published"] / stats["total"] * 100) if stats["total"] > 0 else 0
            )
            avg_source_score = (
                stats["avg_score"] / stats["total"] if stats["total"] > 0 else 0
            )
            f.write(
                f"| {source} | {stats['total']} | {stats['filtered']} | {stats['published']} | {avg_source_score:.1f}/10 | {efficiency:.1f}% |\n"
            )

    logger.info(f"üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ pipeline."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    setup_logging()
    print_banner()

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Python Digest Pipeline")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not validate_configuration():
        logger.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å pipeline –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        sys.exit(1)

    print_configuration_summary()

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    keywords = get_default_keywords()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    google_api = settings.google_api_key if settings.enable_google_news else None
    google_cse = settings.google_cse_id if settings.enable_google_news else None
    rss_feeds = get_default_rss_feeds() if settings.enable_rss_news else None

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_config = create_image_config()

    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    output_dir = project_root / "output"
    output_dir.mkdir(exist_ok=True)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    markdown_file = output_dir / f"news_digest_{timestamp}.md"

    logger.info(f"üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {markdown_file}")
    logger.info("=" * 60)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º
        pipeline_results = run_news_pipeline_with_tracking(
            keywords=keywords,
            flowise_host=settings.flowise_host,
            flowise_filter_id=settings.flowise_filter_id,
            flowise_copywriter_id=settings.flowise_copywriter_id,
            google_api=google_api,
            google_cse=google_cse,
            rss_feeds=rss_feeds,
            rss_hours=settings.rss_hours_period,
            max_per_source=20,  # –°–æ–±–∏—Ä–∞–µ–º –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã –±—ã–ª–æ –∏–∑ —á–µ–≥–æ –≤—ã–±–∏—Ä–∞—Ç—å –¢–û–ü-8
            image_config=image_config,
            save_to_markdown=True,
            markdown_file=str(markdown_file),
        )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_news = pipeline_results["all_news"]
        filtered_news = pipeline_results["filtered_news"]
        final_posts = pipeline_results["final_posts"]

        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
        comprehensive_report_file = output_dir / f"comprehensive_report_{timestamp}.md"
        save_comprehensive_report(
            all_news, filtered_news, final_posts, output_dir, timestamp
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if final_posts:
            logger.success("üéâ Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            logger.success(
                f"üìä –°–æ–∑–¥–∞–Ω–æ {len(final_posts)} –≥–æ—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ (–¢–û–ü-{len(final_posts)} —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö)"
            )

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
            posts_with_images = len([p for p in final_posts if p.get("image_path")])
            logger.info(
                f"üñºÔ∏è –ü–æ—Å—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {posts_with_images}/{len(final_posts)}"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
            save_results_summary(final_posts, output_dir)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            summary_file = output_dir / f"summary_{timestamp}.txt"
            email_sent = send_email_notification(
                posts=final_posts,
                markdown_file=markdown_file,
                summary_file=summary_file if summary_file.exists() else None,
                comprehensive_report=comprehensive_report_file
                if comprehensive_report_file.exists()
                else None,
            )

            if email_sent:
                logger.success("üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            else:
                logger.warning(
                    "‚ö†Ô∏è Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP"
                )

            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞—Ö
            logger.info("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:")
            for idx, post in enumerate(final_posts, 1):
                logger.info(f"   {idx}. {post['title'][:60]}...")
                logger.info(f"      {post['url']}")
                if post.get("image_path"):
                    logger.info(f"      üñºÔ∏è {post['image_path']}")
                logger.info("")

        else:
            logger.warning("üòî Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –ø–æ—Å—Ç–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ")
            logger.warning("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")

            # –í—Å–µ —Ä–∞–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            if all_news:
                save_comprehensive_report(
                    all_news, filtered_news, [], output_dir, timestamp
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç
            summary_file = output_dir / f"summary_{timestamp}.txt"
            email_sent = send_email_notification(
                posts=[],  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
                markdown_file=None,
                summary_file=None,
                comprehensive_report=comprehensive_report_file
                if all_news and comprehensive_report_file.exists()
                else None,
            )

            if email_sent:
                logger.success("üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            else:
                logger.warning(
                    "‚ö†Ô∏è Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP"
                )

    except KeyboardInterrupt:
        logger.warning("‚ö†Ô∏è Pipeline –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ pipeline: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        sys.exit(1)

    logger.info("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    main()
