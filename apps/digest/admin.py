"""
–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è digest.
"""

from django.contrib import admin
from django.utils.html import format_html
from .models import (
    DigestRun, NewsSource, Article, GeneratedPost, Configuration, Keyword
)


@admin.register(DigestRun)
class DigestRunAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–æ–≤ –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
    
    list_display = [
        'id',
        'started_at',
        'status_display',
        'total_articles_collected',
        'total_articles_filtered', 
        'total_posts_created',
        'success_rate_display',
        'duration_display'
    ]
    list_filter = ['status', 'started_at']
    readonly_fields = [
        'started_at', 'finished_at', 'duration', 'success_rate'
    ]
    date_hierarchy = 'started_at'
    
    def status_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å –∏–∫–æ–Ω–∫–∞–º–∏."""
        status_icons = {
            'running': 'üîÑ',
            'completed': '‚úÖ',
            'failed': '‚ùå',
            'partial': '‚ö†Ô∏è'
        }
        return f"{status_icons.get(obj.status, '‚ùì')} {obj.get_status_display()}"
    status_display.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def success_rate_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏."""
        rate = obj.success_rate()
        color = 'green' if rate > 20 else 'orange' if rate > 5 else 'red'
        return format_html(
            '<span style="color: {};"><b>{:.1f}%</b></span>',
            color, rate
        )
    success_rate_display.short_description = '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å'
    
    def duration_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        duration = obj.duration()
        if duration:
            total_seconds = int(duration.total_seconds())
            minutes = total_seconds // 60
            seconds = total_seconds % 60
            return f"{minutes}–º {seconds}—Å"
        return "-"
    duration_display.short_description = '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'


@admin.register(NewsSource)
class NewsSourceAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    
    list_display = [
        'name',
        'source_type_display',
        'is_active_display',
        'priority',
        'last_collected',
        'articles_count',
        'success_rate_display'
    ]
    list_filter = ['source_type', 'is_active']
    list_editable = ['priority', 'is_active']
    
    def source_type_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π."""
        icons = {
            'rss': 'üì∞',
            'google': 'üîç',
            'manual': '‚úçÔ∏è'
        }
        return f"{icons.get(obj.source_type, '‚ùì')} {obj.get_source_type_display()}"
    source_type_display.short_description = '–¢–∏–ø'
    
    def is_active_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å —Ü–≤–µ—Ç–æ–º."""
        if obj.is_active:
            return format_html('<span style="color: green;"><b>‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</b></span>')
        return format_html('<span style="color: red;"><b>‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω</b></span>')
    is_active_display.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def success_rate_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏."""
        color = 'green' if obj.success_rate > 20 else 'orange' if obj.success_rate > 5 else 'red'
        return format_html(
            '<span style="color: {};"><b>{:.1f}%</b></span>',
            color, obj.success_rate
        )
    success_rate_display.short_description = '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å'


class GeneratedPostInline(admin.TabularInline):
    """Inline –¥–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."""
    model = GeneratedPost
    extra = 0
    readonly_fields = ['platform', 'generated_at', 'is_published']
    can_delete = False


@admin.register(Article)
class ArticleAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–µ–π."""
    
    list_display = [
        'title_short',
        'source',
        'content_type_display',
        'interest_score_display',
        'is_relevant_display',
        'collected_at',
        'has_post'
    ]
    list_filter = ['content_type', 'is_relevant', 'source', 'digest_run']
    search_fields = ['title', 'summary']
    readonly_fields = ['collected_at']
    inlines = [GeneratedPostInline]
    
    def title_short(self, obj):
        """–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
        return obj.title[:60] + "..." if len(obj.title) > 60 else obj.title
    title_short.short_description = '–ó–∞–≥–æ–ª–æ–≤–æ–∫'
    
    def content_type_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∏–∫–æ–Ω–∫–æ–π."""
        icons = {
            'tutorial': 'üìö',
            'news': 'üì∞',
            'library': 'üîß',
            'event': 'üìÖ',
            'opinion': 'üí≠',
            'meme': 'üòÇ',
            'other': '‚ùì'
        }
        return f"{icons.get(obj.content_type, '‚ùì')} {obj.get_content_type_display()}"
    content_type_display.short_description = '–¢–∏–ø'
    
    def interest_score_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–∞ —Å —Ü–≤–µ—Ç–æ–º."""
        score = obj.interest_score
        if score >= 8:
            color = 'green'
            emoji = 'üî•'
        elif score >= 5:
            color = 'orange'
            emoji = '‚≠ê'
        else:
            color = 'red'
            emoji = 'üìâ'
        
        return format_html(
            '<span style="color: {};"><b>{} {}/10</b></span>',
            color, emoji, score
        )
    interest_score_display.short_description = '–û—Ü–µ–Ω–∫–∞'
    
    def is_relevant_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å."""
        if obj.is_relevant:
            return format_html('<span style="color: green;"><b>‚úÖ –†–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω</b></span>')
        return format_html('<span style="color: red;"><b>‚ùå –ù–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω</b></span>')
    is_relevant_display.short_description = '–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å'
    
    def has_post(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç."""
        return hasattr(obj, 'generated_post')
    has_post.boolean = True
    has_post.short_description = '–ï—Å—Ç—å –ø–æ—Å—Ç'


@admin.register(GeneratedPost)
class GeneratedPostAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."""
    
    list_display = [
        'article_title',
        'platform_display',
        'has_image',
        'is_published_display',
        'generated_at'
    ]
    list_filter = ['platform', 'is_published', 'generated_at']
    readonly_fields = ['generated_at']
    search_fields = ['article__title', 'post_content']
    
    def article_title(self, obj):
        """–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏."""
        return obj.article.title[:50] + "..." if len(obj.article.title) > 50 else obj.article.title
    article_title.short_description = '–°—Ç–∞—Ç—å—è'
    
    def platform_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —Å –∏–∫–æ–Ω–∫–æ–π."""
        icons = {
            'telegram': 'üì±',
            'twitter': 'üê¶',
            'linkedin': 'üíº',
            'instagram': 'üì∏',
            'general': 'üåê'
        }
        return f"{icons.get(obj.platform, '‚ùì')} {obj.get_platform_display()}"
    platform_display.short_description = '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞'
    
    def has_image(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        return bool(obj.image_path)
    has_image.boolean = True
    has_image.short_description = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
    
    def is_published_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
        if obj.is_published:
            return format_html('<span style="color: green;"><b>‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω</b></span>')
        return format_html('<span style="color: orange;"><b>üìù –ß–µ—Ä–Ω–æ–≤–∏–∫</b></span>')
    is_published_display.short_description = '–°—Ç–∞—Ç—É—Å'


@admin.register(Configuration)
class ConfigurationAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."""
    
    list_display = [
        'name',
        'is_active_display',
        'enable_google_news',
        'enable_rss_news',
        'generate_images',
        'enable_email_sending',
        'updated_at'
    ]
    list_editable = ['is_active']
    readonly_fields = ['created_at', 'updated_at']
    
    def is_active_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        if obj.is_active:
            return format_html('<span style="color: green;"><b>‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è</b></span>')
        return format_html('<span style="color: gray;"><b>‚ö™ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è</b></span>')
    is_active_display.short_description = '–°—Ç–∞—Ç—É—Å'


@admin.register(Keyword)
class KeywordAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
    
    list_display = [
        'keyword',
        'is_active_display',
        'priority',
        'created_at'
    ]
    list_editable = ['is_active', 'priority']
    list_filter = ['is_active']
    search_fields = ['keyword']
    
    def is_active_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞."""
        if obj.is_active:
            return format_html('<span style="color: green;"><b>‚úÖ –ê–∫—Ç–∏–≤–Ω–æ</b></span>')
        return format_html('<span style="color: red;"><b>‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ</b></span>')
    is_active_display.short_description = '–°—Ç–∞—Ç—É—Å'
