"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è digest.
"""

from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from django.contrib import messages

from .models import (
    DigestRun,
    ArticleSource,
    Article,
    GeneratedPost,
    Project,
    Keyword,
)
from .services.pipeline_runner import run_pipeline_for_project


# Inline –∞–¥–º–∏–Ω–∫–∏ –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
class KeywordInline(admin.TabularInline):
    """Inline –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ Google CSE –ø—Ä–æ–µ–∫—Ç–∞."""
    model = Keyword
    extra = 1
    fields = ('keyword', 'priority', 'is_active')
    verbose_name = "–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (–¥–ª—è Google CSE)"
    verbose_name_plural = "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–¥–ª—è Google CSE)"
    classes = ('collapse',)


class ArticleSourceInline(admin.TabularInline):
    """Inline –¥–ª—è RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞."""
    model = ArticleSource
    extra = 1
    fields = ('name', 'url', 'priority', 'is_active')
    show_change_link = True
    verbose_name = "RSS –∏—Å—Ç–æ—á–Ω–∏–∫"
    verbose_name_plural = "RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏"
    classes = ('collapse',)


class ArticleInline(admin.TabularInline):
    """Inline –¥–ª—è —Å—Ç–∞—Ç–µ–π –≤ –∑–∞–ø—É—Å–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞."""
    model = Article
    extra = 0
    fields = ('title', 'interest_score', 'is_relevant', 'content_type', 'source')
    readonly_fields = ('title', 'interest_score', 'is_relevant', 'content_type', 'source')
    can_delete = False
    show_change_link = True

    def has_add_permission(self, request, obj=None):
        return False


@admin.register(Project)
class ProjectAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤."""

    list_display = (
        'name',
        'is_active_badge',
        'sources_count',
        'keywords_count',
        'rss_hours_period',
        'max_final_posts',
        'updated_at',
    )
    list_filter = ('is_active', 'enable_rss_news', 'enable_google_news', 'generate_images')
    search_fields = ('name',)
    readonly_fields = ('created_at', 'updated_at')

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'is_active')
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∞', {
            'fields': (
                'rss_hours_period',
                'max_articles_per_source',
                'max_final_posts',
            ),
            'description': '–û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–µ–π'
        }),
        ('–§—É–Ω–∫—Ü–∏–∏', {
            'fields': (
                'enable_rss_news',
                'enable_google_news',
                'generate_images',
                'enable_email_sending',
            ),
            'description': 'RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –Ω–∏–∂–µ. Google CSE - —á–µ—Ä–µ–∑ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.'
        }),
        ('–ü—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞', {
            'classes': ('collapse',),
            'fields': ('filter_system_prompt', 'filter_user_prompt')
        }),
        ('–ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞', {
            'classes': ('collapse',),
            'fields': ('copywriter_system_prompt', 'copywriter_user_prompt')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'classes': ('collapse',),
            'fields': ('created_at', 'updated_at')
        }),
    )

    inlines = [KeywordInline, ArticleSourceInline]
    actions = ['run_digest_action', 'activate_project']

    def is_active_badge(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–Ω–∞—á–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
        if obj.is_active:
            return format_html('<span style="color: green;">‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π</span>')
        return format_html('<span style="color: gray;">‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π</span>')
    is_active_badge.short_description = '–°—Ç–∞—Ç—É—Å'

    def sources_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
        count = obj.sources.count()
        active_count = obj.sources.filter(is_active=True).count()
        return format_html('{} <span style="color: gray;">(–∞–∫—Ç–∏–≤–Ω—ã—Ö: {})</span>', count, active_count)
    sources_count.short_description = 'RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤'

    def keywords_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è Google CSE."""
        count = obj.keywords.count()
        active_count = obj.keywords.filter(is_active=True).count()
        return format_html('{} <span style="color: gray;">(–∞–∫—Ç–∏–≤–Ω—ã—Ö: {})</span>', count, active_count)
    keywords_count.short_description = '–ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (CSE)'

    @admin.action(description='üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤')
    def run_digest_action(self, request, queryset):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤."""
        if queryset.count() > 1:
            self.message_user(
                request,
                "–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞ —Ä–∞–∑",
                level=messages.WARNING
            )
            return

        project = queryset.first()

        try:
            self.message_user(
                request,
                f"üöÄ –ó–∞–ø—É—Å–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project.name}'...",
                level=messages.INFO
            )

            result = run_pipeline_for_project(project.id)

            if result['success']:
                self.message_user(
                    request,
                    f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –°–æ–∑–¥–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {result['total_posts']}",
                    level=messages.SUCCESS
                )
            else:
                self.message_user(
                    request,
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {result['error']}",
                    level=messages.ERROR
                )
        except Exception as e:
            self.message_user(
                request,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                level=messages.ERROR
            )

    @admin.action(description='‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã')
    def activate_project(self, request, queryset):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ)."""
        if queryset.count() > 1:
            self.message_user(
                request,
                "–ú–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç",
                level=messages.WARNING
            )
            return

        project = queryset.first()
        Project.objects.filter(is_active=True).update(is_active=False)
        project.is_active = True
        project.save()

        self.message_user(
            request,
            f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{project.name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
            level=messages.SUCCESS
        )


@admin.register(ArticleSource)
class ArticleSourceAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π."""

    list_display = (
        'name',
        'project',
        'is_active',
        'priority',
        'articles_count',
        'success_rate_display',
        'last_collected',
    )
    list_filter = ('is_active', 'project')
    search_fields = ('name', 'url')
    list_editable = ('is_active', 'priority')

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('project', 'name', 'url'),
            'description': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ RSS –ª–µ–Ω—Ç—ã –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–µ–π'
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('is_active', 'priority')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'classes': ('collapse',),
            'fields': ('last_collected', 'articles_count', 'success_rate')
        }),
    )

    def success_rate_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å —Ü–≤–µ—Ç–æ–º."""
        rate = obj.success_rate
        color = 'green' if rate > 50 else 'orange' if rate > 20 else 'red'
        return format_html('<span style="color: {};">{}</span>', color, f'{rate:.1f}%')
    success_rate_display.short_description = '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å'


@admin.register(Keyword)
class KeywordAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ Google CSE."""

    list_display = ('keyword', 'project', 'priority', 'is_active', 'created_at')
    list_filter = ('is_active', 'priority', 'project')
    search_fields = ('keyword',)
    list_editable = ('priority', 'is_active')

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('project', 'keyword'),
            'description': '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Google Custom Search Engine (CSE)'
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('priority', 'is_active')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'classes': ('collapse',),
            'fields': ('created_at',)
        }),
    )
    readonly_fields = ('created_at',)


@admin.register(DigestRun)
class DigestRunAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–æ–≤ –¥–∞–π–¥–∂–µ—Å—Ç–∞."""

    list_display = (
        'id',
        'started_at',
        'status_badge',
        'duration_display',
        'total_articles_collected',
        'total_articles_filtered',
        'total_posts_created',
        'success_rate_display',
    )
    list_filter = ('status', 'started_at')
    search_fields = ('id',)
    readonly_fields = (
        'created_at',
        'started_at',
        'finished_at',
        'total_articles_collected',
        'total_articles_filtered',
        'total_posts_created',
        'total_images_generated',
        'duration_display',
        'success_rate_display',
        'filter_rate_display',
    )

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('status', 'created_at', 'started_at', 'finished_at')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': (
                'total_articles_collected',
                'total_articles_filtered',
                'total_posts_created',
                'total_images_generated',
                'duration_display',
                'success_rate_display',
                'filter_rate_display',
            )
        }),
        ('–û—à–∏–±–∫–∏', {
            'classes': ('collapse',),
            'fields': ('error_message',)
        }),
        ('–§–∞–π–ª—ã', {
            'classes': ('collapse',),
            'fields': ('markdown_file', 'report_file')
        }),
    )

    inlines = [ArticleInline]

    def status_badge(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å –∏–∫–æ–Ω–∫–æ–π."""
        badges = {
            'running': '<span style="color: blue;">üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è</span>',
            'completed': '<span style="color: green;">‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω</span>',
            'failed': '<span style="color: red;">‚ùå –û—à–∏–±–∫–∞</span>',
            'partial': '<span style="color: orange;">‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ</span>',
        }
        return format_html(badges.get(obj.status, obj.status))
    status_badge.short_description = '–°—Ç–∞—Ç—É—Å'

    def duration_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å."""
        duration = obj.duration()
        hours = int(duration.total_seconds() // 3600)
        minutes = int((duration.total_seconds() % 3600) // 60)
        seconds = int(duration.total_seconds() % 60)

        if hours > 0:
            return f"{hours}—á {minutes}–º {seconds}—Å"
        elif minutes > 0:
            return f"{minutes}–º {seconds}—Å"
        else:
            return f"{seconds}—Å"
    duration_display.short_description = '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'

    def success_rate_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏."""
        rate = obj.success_rate()
        color = 'green' if rate > 30 else 'orange' if rate > 10 else 'red'
        return format_html('<span style="color: {};">{}</span>', color, f'{rate:.1f}%')
    success_rate_display.short_description = '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å'

    def filter_rate_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞."""
        rate = obj.filter_rate()
        color = 'green' if rate > 40 else 'orange' if rate > 20 else 'red'
        return format_html('<span style="color: {};">{}</span>', color, f'{rate:.1f}%')
    filter_rate_display.short_description = '–ü—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä'

    def has_add_permission(self, request):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º —Ä—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–æ–≤."""
        return False


@admin.register(Article)
class ArticleAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —Å—Ç–∞—Ç–µ–π."""

    list_display = (
        'short_title',
        'digest_run',
        'source',
        'content_type',
        'interest_score_badge',
        'is_relevant',
        'collected_at',
    )
    list_filter = (
        'is_relevant',
        'content_type',
        'digest_run',
        'source',
        'collected_at',
    )
    search_fields = ('title', 'summary', 'url')
    readonly_fields = (
        'digest_run',
        'source',
        'title',
        'url',
        'summary',
        'content_type',
        'interest_score',
        'is_relevant',
        'relevance_reason',
        'interest_reason',
        'collected_at',
        'url_link',
    )

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('digest_run', 'source', 'title', 'url_link', 'content_type')
        }),
        ('–ö–æ–Ω—Ç–µ–Ω—Ç', {
            'fields': ('summary',)
        }),
        ('–û—Ü–µ–Ω–∫–∞', {
            'fields': (
                'interest_score',
                'is_relevant',
                'relevance_reason',
                'interest_reason',
            )
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'classes': ('collapse',),
            'fields': ('collected_at',)
        }),
    )

    def short_title(self, obj):
        """–£–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
        return obj.short_title
    short_title.short_description = '–ó–∞–≥–æ–ª–æ–≤–æ–∫'

    def interest_score_badge(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–∞ —Å —Ü–≤–µ—Ç–æ–º."""
        score = obj.interest_score
        color = 'green' if score >= 7 else 'orange' if score >= 5 else 'red'
        return format_html('<span style="color: {};">{}</span>', color, f'{score:.1f}/10')
    interest_score_badge.short_description = '–û—Ü–µ–Ω–∫–∞'

    def url_link(self, obj):
        """–ö–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞."""
        return format_html('<a href="{}" target="_blank">{}</a>', obj.url, obj.url)
    url_link.short_description = '–°—Å—ã–ª–∫–∞'

    def has_add_permission(self, request):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º —Ä—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π."""
        return False

    def has_delete_permission(self, request, obj=None):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π."""
        return False


@admin.register(GeneratedPost)
class GeneratedPostAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."""

    list_display = (
        'article_title',
        'platform',
        'has_image_badge',
        'is_published',
        'generated_at',
        'published_at',
    )
    list_filter = ('platform', 'is_published', 'generated_at')
    search_fields = ('article__title', 'post_content')
    readonly_fields = (
        'article',
        'platform',
        'post_content',
        'image_idea',
        'image_path',
        'generated_at',
        'image_preview',
    )

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('article', 'platform', 'generated_at')
        }),
        ('–ö–æ–Ω—Ç–µ–Ω—Ç', {
            'fields': ('post_content',)
        }),
        ('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', {
            'fields': ('image_idea', 'image_path', 'image_preview')
        }),
        ('–ü—É–±–ª–∏–∫–∞—Ü–∏—è', {
            'fields': ('is_published', 'published_at')
        }),
    )

    def article_title(self, obj):
        """–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏."""
        return obj.article.short_title
    article_title.short_description = '–°—Ç–∞—Ç—å—è'

    def has_image_badge(self, obj):
        """–ó–Ω–∞—á–æ–∫ –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        if obj.has_image:
            return format_html('<span style="color: green;">‚úÖ –î–∞</span>')
        return format_html('<span style="color: gray;">‚ùå –ù–µ—Ç</span>')
    has_image_badge.short_description = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'

    def image_preview(self, obj):
        """–ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        if obj.image_path:
            return format_html(
                '<img src="{}" style="max-width: 300px; max-height: 300px;" />',
                obj.image_path.url
            )
        return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    image_preview.short_description = '–ü—Ä–µ–≤—å—é'

    def has_add_permission(self, request):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º —Ä—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤."""
        return False
