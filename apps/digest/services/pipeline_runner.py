"""
–ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ë–î.
"""

import os
from typing import Optional, Dict, List
from loguru import logger

from apps.digest.models import Project, DigestRun, ArticleSource
from apps.digest.services.digest_service import NewsPipeline


def get_api_keys_from_env() -> Dict[str, Optional[str]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.

    Returns:
        Dict: –°–ª–æ–≤–∞—Ä—å —Å API –∫–ª—é—á–∞–º–∏
    """
    return {
        'deepseek_api_key': os.getenv('DEEPSEEK_API_KEY'),
        'google_api_key': os.getenv('GOOGLE_API_KEY'),
        'google_cse_id': os.getenv('GOOGLE_CSE_ID'),
        'openai_api_key': os.getenv('OPENAI_API_KEY'),
    }


def run_pipeline_for_project(project_id: Optional[int] = None) -> Dict[str, any]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.

    Args:
        project_id: ID –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç)

    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞

    Raises:
        ValueError: –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    if project_id:
        project = Project.objects.filter(id=project_id).first()
        if not project:
            raise ValueError(f"–ü—Ä–æ–µ–∫—Ç —Å ID {project_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        project = Project.get_active()
        if not project:
            raise ValueError("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ–≥–æ.")

    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {project.name}")

    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_keys = get_api_keys_from_env()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ DeepSeek API –∫–ª—é—á–∞
    if not api_keys['deepseek_api_key']:
        raise ValueError("DEEPSEEK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    keywords = project.get_active_keywords()
    if not keywords:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –∞–¥–º–∏–Ω–∫–µ.")
        keywords = ["Python"]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    logger.info(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}")

    # –ü–æ–ª—É—á–∞–µ–º RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    rss_sources = project.get_rss_sources()
    rss_feeds = [source.url for source in rss_sources if source.url]

    if project.enable_rss_news and not rss_feeds:
        logger.warning("‚ö†Ô∏è RSS –≤–∫–ª—é—á–µ–Ω, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ.")

    logger.info(f"üì° –ù–∞–π–¥–µ–Ω–æ {len(rss_feeds)} RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_config = {
        'enabled': project.generate_images,
        'openai_api_key': api_keys['openai_api_key'],
    }

    # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
    pipeline = NewsPipeline(
        deepseek_api_key=api_keys['deepseek_api_key'],
        image_config=image_config,
        filter_system_prompt=project.filter_system_prompt,
        filter_user_prompt=project.filter_user_prompt,
        copywriter_system_prompt=project.copywriter_system_prompt,
        copywriter_user_prompt=project.copywriter_user_prompt,
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É
    try:
        final_articles = pipeline.run_full_pipeline(
            keywords=keywords,
            google_api=api_keys['google_api_key'] if project.enable_google_news else None,
            google_cse=api_keys['google_cse_id'] if project.enable_google_news else None,
            rss_feeds=rss_feeds if project.enable_rss_news else None,
            rss_hours=project.rss_hours_period,
            max_per_source=project.max_articles_per_source,
        )

        logger.info(f"‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! –°–æ–∑–¥–∞–Ω–æ {len(final_articles)} –ø–æ—Å—Ç–æ–≤")

        return {
            'success': True,
            'project': project.name,
            'total_posts': len(final_articles),
            'articles': final_articles,
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        return {
            'success': False,
            'project': project.name,
            'error': str(e),
        }


def run_pipeline_with_custom_prompts(
    project_id: Optional[int] = None,
    filter_system_prompt: Optional[str] = None,
    filter_user_prompt: Optional[str] = None,
    copywriter_system_prompt: Optional[str] = None,
    copywriter_user_prompt: Optional[str] = None,
) -> Dict[str, any]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏.

    Args:
        project_id: ID –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç)
        filter_system_prompt: –ö–∞—Å—Ç–æ–º–Ω—ã–π system prompt –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        filter_user_prompt: –ö–∞—Å—Ç–æ–º–Ω—ã–π user prompt –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        copywriter_system_prompt: –ö–∞—Å—Ç–æ–º–Ω—ã–π system prompt –¥–ª—è –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞
        copywriter_user_prompt: –ö–∞—Å—Ç–æ–º–Ω—ã–π user prompt –¥–ª—è –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞

    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
    """
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ —Å–µ—Ä–≤–∏—Å—ã
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
    return run_pipeline_for_project(project_id)
