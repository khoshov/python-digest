from typing import Dict

from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import JsonOutputParser
from pydantic import BaseModel, Field

from logger.logger import setup_logger
from apps.digest import prompts

logger = setup_logger(module_name=__name__)


# Pydantic –º–æ–¥–µ–ª—å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞
class CopywriterResponse(BaseModel):
    post: str = Field(description="–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è Telegram —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤)", max_length=500)
    image_idea: str = Field(description="–ò–¥–µ—è –¥–ª—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è DALL-E")


class CopywriterService:
    def __init__(self):
        self.parser = JsonOutputParser(pydantic_object=CopywriterResponse)

    def call_deepseek_copywriter(
        self,
        article: Dict[str, str],
        deepseek_api_key: str,
        system_prompt: str = None,
        user_prompt: str = None
    ) -> Dict[str, str]:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç DeepSeek API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram-–ø–æ—Å—Ç–∞ –∏–∑ –Ω–æ–≤–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—è LangChain.

        –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç:
        - post: –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram —Å Markdown
        - image_idea: –∏–¥–µ—è –¥–ª—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Args:
            article: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—å–∏ (title, summary, url)
            deepseek_api_key: API –∫–ª—é—á DeepSeek
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            user_prompt: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            Dict: {"post": "—Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞", "image_idea": "–æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏"}
        """
        try:
            # –°–æ–∑–¥–∞–µ–º LLM –º–æ–¥–µ–ª—å DeepSeek —á–µ—Ä–µ–∑ OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API
            llm = ChatOpenAI(
                model="deepseek-chat",
                api_key=deepseek_api_key,
                base_url="https://api.deepseek.com/v1",
                temperature=0.7,
            )

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if system_prompt is None:
                system_prompt = prompts.COPYWRITER_SYSTEM_PROMPT

            if user_prompt is None:
                user_prompt = prompts.COPYWRITER_USER_PROMPT

            # –°–æ–∑–¥–∞–µ–º prompt template
            prompt = ChatPromptTemplate.from_messages([
                ("system", system_prompt),
                ("user", user_prompt)
            ])

            # –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É
            chain = prompt | llm | self.parser

            # –í—ã–∑—ã–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É
            result = chain.invoke({
                "title": article.get('title', ''),
                "summary": article.get('summary', ''),
                "url": article.get('url', ''),
                "format_instructions": self.parser.get_format_instructions()
            })

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(f"üìù –°–æ–∑–¥–∞–Ω –ø–æ—Å—Ç –¥–ª—è '{article.get('title', '')[:50]}...' ({len(result.get('post', ''))} —Å–∏–º–≤–æ–ª–æ–≤)")

            return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ DeepSeek copywriter: {e}")
            return {
                "post": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è: {article.get('title', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞—Ç—å—è')}",
                "image_idea": "Error generating image idea",
            }
