from typing import List, Dict
import json

from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import JsonOutputParser
from pydantic import BaseModel, Field

from logger.logger import setup_logger
from apps.digest import prompts

logger = setup_logger(module_name=__name__)


# Pydantic –º–æ–¥–µ–ª—å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞
class FilterResponse(BaseModel):
    is_relevant: bool = Field(description="–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ –ª–∏ —Å—Ç–∞—Ç—å—è –¥–ª—è Python Digest")
    relevance_reason: str = Field(description="–ü—Ä–∏—á–∏–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏")
    interest_score: float = Field(description="–û—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –æ—Ç 0 –¥–æ 10", ge=0, le=10)
    interest_reason: str = Field(description="–ü–æ—á–µ–º—É —Ç–∞–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞")
    content_type: str = Field(description="–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: tutorial/news/library/event/opinion/meme/other")
    summary: str = Field(description="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–¥–æ 350 —Å–∏–º–≤–æ–ª–æ–≤)", max_length=350)
    title_ru: str = Field(description="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)", max_length=100)
    url: str = Field(description="URL —Å—Ç–∞—Ç—å–∏")


class FilterService:
    def __init__(self):
        self.parser = JsonOutputParser(pydantic_object=FilterResponse)

    def check_relevance_with_deepseek(
        self,
        article: Dict[str, str],
        deepseek_api_key: str,
        system_prompt: str = None,
        user_prompt: str = None
    ) -> Dict[str, any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ DeepSeek API –∏—Å–ø–æ–ª—å–∑—É—è LangChain.

        Args:
            article: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—å–∏ (title, summary, url)
            deepseek_api_key: API –∫–ª—é—á DeepSeek
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            user_prompt: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º LLM –º–æ–¥–µ–ª—å DeepSeek —á–µ—Ä–µ–∑ OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API
            llm = ChatOpenAI(
                model="deepseek-chat",
                api_key=deepseek_api_key,
                base_url="https://api.deepseek.com/v1",
                temperature=0.3,
            )

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if system_prompt is None:
                system_prompt = prompts.FILTER_SYSTEM_PROMPT

            if user_prompt is None:
                user_prompt = prompts.FILTER_USER_PROMPT

            # –°–æ–∑–¥–∞–µ–º prompt template
            prompt = ChatPromptTemplate.from_messages([
                ("system", system_prompt),
                ("user", user_prompt)
            ])

            # –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É
            chain = prompt | llm | self.parser

            # –í—ã–∑—ã–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É
            result = chain.invoke({
                "title": article.get('title', ''),
                "summary": article.get('summary', ''),
                "url": article.get('url', ''),
                "format_instructions": self.parser.get_format_instructions()
            })

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(
                f"üì• –û—Ç–≤–µ—Ç –æ—Ç DeepSeek –¥–ª—è '{article.get('title', '')[:50]}...': —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å={result.get('is_relevant')}, –æ—Ü–µ–Ω–∫–∞={result.get('interest_score')}/10"
            )

            return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ DeepSeek: {e}")
            return {
                "is_relevant": False,
                "relevance_reason": f"–û—à–∏–±–∫–∞ API: {str(e)[:100]}",
                "interest_score": 0,
                "interest_reason": "–û—à–∏–±–∫–∞ API",
                "content_type": "–û—à–∏–±–∫–∞",
                "summary": "",
                "title_ru": "",
                "url": article.get("url", ""),
            }

    def filter_news(
        self,
        articles: List[Dict[str, str]],
        deepseek_api_key: str,
        system_prompt: str = None,
        user_prompt: str = None
    ) -> List[Dict[str, str]]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ DeepSeek API.

        Args:
            articles: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            deepseek_api_key: API –∫–ª—é—á DeepSeek
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            user_prompt: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            List[Dict]: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
        """
        filtered_articles = []

        for article in articles:
            relevance_check = self.check_relevance_with_deepseek(
                article, deepseek_api_key, system_prompt, user_prompt
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫ —Å—Ç–∞—Ç—å–µ
            article_with_meta = article.copy()
            article_with_meta["filter_result"] = relevance_check

            if relevance_check["is_relevant"]:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if relevance_check["title_ru"]:
                    article_with_meta["title"] = relevance_check["title_ru"]
                if relevance_check["summary"]:
                    article_with_meta["summary"] = relevance_check["summary"]

                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                article_with_meta["content_type"] = relevance_check["content_type"]
                article_with_meta["interest_score"] = relevance_check["interest_score"]
                article_with_meta["is_relevant"] = True
                article_with_meta["relevance_reason"] = relevance_check["relevance_reason"]
                article_with_meta["interest_reason"] = relevance_check["interest_reason"]

                filtered_articles.append(article_with_meta)
                logger.debug(
                    f"‚úì –°—Ç–∞—Ç—å—è –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä: {article['title'][:50]}... (–û—Ü–µ–Ω–∫–∞: {relevance_check['interest_score']}/10, –¢–∏–ø: {relevance_check['content_type']})"
                )
            else:
                logger.debug(
                    f"‚úó –°—Ç–∞—Ç—å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {article['title'][:50]}... –ü—Ä–∏—á–∏–Ω–∞: {relevance_check['relevance_reason']}"
                )

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—Ü–µ–Ω–∫–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ (–æ—Ç –≤—ã—Å–æ–∫–æ–π –∫ –Ω–∏–∑–∫–æ–π)
        filtered_articles.sort(key=lambda x: x.get("interest_score", 0), reverse=True)

        logger.info(
            f"üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç–∏ (–æ—Ç {filtered_articles[0].get('interest_score', 0)}/10 –¥–æ {filtered_articles[-1].get('interest_score', 0)}/10)"
            if filtered_articles
            else ""
        )

        return filtered_articles

    def get_all_articles_with_filter_results(
        self,
        articles: List[Dict[str, str]],
        deepseek_api_key: str,
        system_prompt: str = None,
        user_prompt: str = None
    ) -> List[Dict[str, str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å—Ç–∞—Ç—å–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∞—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ).

        Args:
            articles: –ò—Å—Ö–æ–¥–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
            deepseek_api_key: API –∫–ª—é—á DeepSeek
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            user_prompt: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            List[Dict]: –í—Å–µ —Å—Ç–∞—Ç—å–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        """
        articles_with_results = []

        for article in articles:
            relevance_check = self.check_relevance_with_deepseek(
                article, deepseek_api_key, system_prompt, user_prompt
            )

            article_with_meta = article.copy()
            article_with_meta["filter_result"] = relevance_check

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if relevance_check["title_ru"]:
                article_with_meta["title_filtered"] = relevance_check["title_ru"]
            if relevance_check["summary"]:
                article_with_meta["summary_filtered"] = relevance_check["summary"]

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            article_with_meta["content_type"] = relevance_check["content_type"]
            article_with_meta["interest_score"] = relevance_check["interest_score"]
            article_with_meta["is_relevant"] = relevance_check["is_relevant"]
            article_with_meta["relevance_reason"] = relevance_check["relevance_reason"]
            article_with_meta["interest_reason"] = relevance_check["interest_reason"]

            articles_with_results.append(article_with_meta)

            if relevance_check["is_relevant"]:
                logger.debug(
                    f"‚úì –°—Ç–∞—Ç—å—è –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä: {article['title'][:50]}... (–û—Ü–µ–Ω–∫–∞: {relevance_check['interest_score']}/10)"
                )
            else:
                logger.debug(
                    f"‚úó –°—Ç–∞—Ç—å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {article['title'][:50]}... –ü—Ä–∏—á–∏–Ω–∞: {relevance_check['relevance_reason']}"
                )

        return articles_with_results
