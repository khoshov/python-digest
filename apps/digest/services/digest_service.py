"""
–ú–æ–¥—É–ª—å pipeline - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.

–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
1. Scout - —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
2. Filter - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ DeepSeek API
3. Copywriter - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ.
"""

from typing import List, Dict, Optional
from loguru import logger
from datetime import datetime
from pathlib import Path

# Import the service classes
from .scout_service import ScoutService
from .filter_service import FilterService
from .copywriter_service import CopywriterService
from .image_generation_service import generate_image_for_post
from .deduplication_service import DeduplicationService
from .integration_service import IntegrationService

# Create instances for module-level function calls
scout_service = ScoutService()
filter_service = FilterService()
copywriter_service = CopywriterService()
deduplication_service = DeduplicationService()
integration_service = IntegrationService()


class DigestService:
    def save_news_to_markdown(
        self, articles: List[Dict[str, str]], markdown_file: str = "news_digest.md"
    ) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ markdown —Ñ–∞–π–ª.

        Args:
            articles: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π —Å –ø–æ—Å—Ç–∞–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            markdown_file: –ü—É—Ç—å –∫ markdown —Ñ–∞–π–ª—É
        """
        markdown_path = Path(markdown_file)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–æ–≤—ã–π
        if not markdown_path.exists():
            with open(markdown_path, "w", encoding="utf-8") as f:
                f.write("# News Digest\n\n")
                f.write("Generated by SMM Agents\n\n")
                f.write("---\n\n")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        with open(markdown_path, "a", encoding="utf-8") as f:
            f.write(f"## Digest –æ—Ç {datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n")

            for idx, article in enumerate(articles, 1):
                logger.debug(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å—é –≤ markdown: {article.keys()}")
                logger.debug(
                    f"post_content –¥–ª–∏–Ω–∞: {len(article.get('post_content', ''))}"
                )

                f.write(f"### {idx}. {article['title']}\n\n")

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if article.get("image_path"):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è markdown
                    image_path = Path(article["image_path"]).name
                    f.write(f"![–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](./{image_path})\n\n")

                f.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** [{article['url']}]({article['url']})\n\n")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞
                post_content = article.get("post_content", "")
                if post_content:
                    f.write(f"{post_content}\n\n")
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç post_content, –∏—Å–ø–æ–ª—å–∑—É–µ–º summary –∫–∞–∫ fallback
                    summary = article.get("summary", "")
                    if summary:
                        f.write(f"**–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**\n{summary}\n\n")
                    else:
                        f.write("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n")

                f.write("---\n\n")

            f.write("\n")

        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(articles)} –Ω–æ–≤–æ—Å—Ç–µ–π –≤ {markdown_path}")


class NewsPipeline:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.

    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –Ω–∏–º–∏.
    """

    def __init__(
        self,
        deepseek_api_key: str,
        image_config: Optional[Dict] = None,
        filter_system_prompt: Optional[str] = None,
        filter_user_prompt: Optional[str] = None,
        copywriter_system_prompt: Optional[str] = None,
        copywriter_user_prompt: Optional[str] = None,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pipeline —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ DeepSeek API –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

        Args:
            deepseek_api_key: API –∫–ª—é—á DeepSeek
            image_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            filter_system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            filter_user_prompt: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            copywriter_system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            copywriter_user_prompt: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.deepseek_api_key = deepseek_api_key
        self.image_config = image_config or {}
        self.filter_system_prompt = filter_system_prompt
        self.filter_user_prompt = filter_user_prompt
        self.copywriter_system_prompt = copywriter_system_prompt
        self.copywriter_user_prompt = copywriter_user_prompt
        self.integration_service = IntegrationService()

    def run_scout_stage(
        self,
        keywords: List[str],
        google_api: Optional[str] = None,
        google_cse: Optional[str] = None,
        rss_feeds: Optional[List[str]] = None,
        rss_hours: int = 72,
        max_per_source: int = 5,
    ) -> List[Dict[str, str]]:
        """
        –≠—Ç–∞–ø 1: –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Scout –∞–≥–µ–Ω—Ç–∞.

        Args:
            keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            google_api: Google API –∫–ª—é—á
            google_cse: Google Custom Search Engine ID
            rss_feeds: –°–ø–∏—Å–æ–∫ RSS –ª–µ–Ω—Ç
            rss_hours: –ü–µ—Ä–∏–æ–¥ –≤ —á–∞—Å–∞—Ö –¥–ª—è RSS
            max_per_source: –ú–∞–∫—Å–∏–º—É–º —Å—Ç–∞—Ç–µ–π —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞

        Returns:
            List[Dict]: –°–æ–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
        """
        logger.info("üîç –≠—Ç–∞–ø 1: –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π (Scout)")

        articles = scout_service.collect_insights(
            keywords=keywords,
            google_api=google_api,
            google_cse=google_cse,
            rss_feeds=rss_feeds,
            rss_hours=rss_hours,
            max_per_source=max_per_source,
        )

        logger.info(f"‚úÖ Scout: —Å–æ–±—Ä–∞–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π")

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞
        unique_articles = deduplication_service.deduplicate_articles(articles)

        return unique_articles

    def run_filter_stage(self, articles: List[Dict[str, str]]) -> List[Dict[str, str]]:
        """
        –≠—Ç–∞–ø 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Filter –∞–≥–µ–Ω—Ç–∞.

        Args:
            articles: –°—Ç–∞—Ç—å–∏ –æ—Ç Scout –∞–≥–µ–Ω—Ç–∞

        Returns:
            List[Dict]: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
        """
        logger.info("üîç –≠—Ç–∞–ø 2: –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π (Filter)")

        if not articles:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
            return []

        filtered_articles = filter_service.filter_news(
            articles=articles,
            deepseek_api_key=self.deepseek_api_key,
            system_prompt=self.filter_system_prompt,
            user_prompt=self.filter_user_prompt,
        )

        logger.info(
            f"‚úÖ Filter: –ø—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä {len(filtered_articles)} –∏–∑ {len(articles)} —Å—Ç–∞—Ç–µ–π"
        )
        return filtered_articles

    def run_copywriter_stage(
        self, articles: List[Dict[str, str]], max_posts: int = 8
    ) -> List[Dict[str, str]]:
        """
        –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ Copywriter –∞–≥–µ–Ω—Ç–∞.

        Args:
            articles: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –æ—Ç Filter –∞–≥–µ–Ω—Ç–∞
            max_posts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è

        Returns:
            List[Dict]: –°—Ç–∞—Ç—å–∏ —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏
        """
        logger.info("‚úçÔ∏è –≠—Ç–∞–ø 3: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ (Copywriter)")

        if not articles:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤")
            return []

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –¥–æ –º–∞–∫—Å–∏–º—É–º–∞
        articles_to_process = articles[:max_posts]
        if len(articles) > max_posts:
            logger.info(
                f"üìä –í—ã–±–∏—Ä–∞–µ–º –¢–û–ü-{max_posts} —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –∏–∑ {len(articles)} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö"
            )

        articles_with_posts = []

        for idx, article in enumerate(articles_to_process, 1):
            interest_score = article.get("interest_score", 0)
            logger.debug(
                f"–°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –¥–ª—è —Å—Ç–∞—Ç—å–∏ {idx}/{len(articles_to_process)} (–æ—Ü–µ–Ω–∫–∞ {interest_score}/10): {article['title'][:50]}..."
            )

            try:
                copywriter_result = copywriter_service.call_deepseek_copywriter(
                    article=article,
                    deepseek_api_key=self.deepseek_api_key,
                    system_prompt=self.copywriter_system_prompt,
                    user_prompt=self.copywriter_user_prompt,
                )

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –∏ –∏–¥–µ—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Å—Ç–∞—Ç—å–µ
                article_with_post = article.copy()
                article_with_post["post_content"] = copywriter_result["post"]
                article_with_post["image_idea"] = copywriter_result["image_idea"]
                articles_with_posts.append(article_with_post)

                logger.debug(
                    f"‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è: {article['title'][:50]}... (—Ä–µ–π—Ç–∏–Ω–≥ {interest_score}/10)"
                )

            except Exception as e:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è {article['title'][:50]}...: {e}"
                )
                continue

        logger.info(
            f"‚úÖ Copywriter: —Å–æ–∑–¥–∞–Ω–æ {len(articles_with_posts)} –ø–æ—Å—Ç–æ–≤ –∏–∑ {len(articles_to_process)} –¢–û–ü —Å—Ç–∞—Ç–µ–π (–≤—Å–µ–≥–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {len(articles)})"
        )
        return articles_with_posts

    def run_image_generator_stage(
        self, articles: List[Dict[str, str]]
    ) -> List[Dict[str, str]]:
        """
        –≠—Ç–∞–ø 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenAI DALL-E.

        Args:
            articles: –°—Ç–∞—Ç—å–∏ —Å –ø–æ—Å—Ç–∞–º–∏ –æ—Ç Copywriter –∞–≥–µ–Ω—Ç–∞

        Returns:
            List[Dict]: –°—Ç–∞—Ç—å–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        """
        logger.info("üé® –≠—Ç–∞–ø 4: –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (OpenAI DALL-E)")

        if not articles:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            return []

        if not self.image_config.get("enabled", False):
            logger.info("‚ÑπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return articles

        # –ü–æ–ª—É—á–∞–µ–º API key –¥–ª—è OpenAI
        openai_api_key = self.image_config.get("openai_api_key")
        if not openai_api_key:
            logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω OpenAI API key –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            return articles

        articles_with_images = []

        for idx, article in enumerate(articles, 1):
            logger.debug(
                f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—å–∏ {idx}/{len(articles)}: {article['title'][:50]}..."
            )

            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è –∏–¥–µ—é –æ—Ç –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞
                image_path = generate_image_for_post(
                    image_idea=article["image_idea"],
                    api_key=openai_api_key,
                    **self.image_config,
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                article_with_image = article.copy()
                article_with_image["image_path"] = image_path
                articles_with_images.append(article_with_image)

                if image_path:
                    logger.debug(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {image_path}")
                else:
                    logger.debug("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

            except Exception as e:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {article['title'][:50]}...: {e}"
                )
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                article_copy = article.copy()
                article_copy["image_path"] = None
                articles_with_images.append(article_copy)

        successful_images = len(
            [a for a in articles_with_images if a.get("image_path")]
        )
        logger.info(
            f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: —Å–æ–∑–¥–∞–Ω–æ {successful_images} –∏–∑ {len(articles)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
        )

        return articles_with_images

    def run_full_pipeline(
        self,
        keywords: List[str],
        google_api: Optional[str] = None,
        google_cse: Optional[str] = None,
        rss_feeds: Optional[List[str]] = None,
        rss_hours: int = 72,
        max_per_source: int = 5,
    ) -> List[Dict[str, str]]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏: Scout ‚Üí Filter ‚Üí Copywriter.

        Args:
            keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            google_api: Google API –∫–ª—é—á
            google_cse: Google Custom Search Engine ID
            rss_feeds: –°–ø–∏—Å–æ–∫ RSS –ª–µ–Ω—Ç
            rss_hours: –ü–µ—Ä–∏–æ–¥ –≤ —á–∞—Å–∞—Ö –¥–ª—è RSS
            max_per_source: –ú–∞–∫—Å–∏–º—É–º —Å—Ç–∞—Ç–µ–π —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞

        Returns:
            List[Dict]: –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ —Å –ø–æ—Å—Ç–∞–º–∏
        """
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—É—Å–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        digest_run = self.integration_service.create_digest_run()

        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
        pipeline_start_time = logger.bind(stage="pipeline").info

        # –≠—Ç–∞–ø 1: Scout - —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π
        articles = self.run_scout_stage(
            keywords=keywords,
            google_api=google_api,
            google_cse=google_cse,
            rss_feeds=rss_feeds,
            rss_hours=rss_hours,
            max_per_source=max_per_source,
        )

        if not articles:
            logger.warning("‚ö†Ô∏è Pipeline –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: Scout –Ω–µ –Ω–∞—à–µ–ª —Å—Ç–∞—Ç–µ–π")
            self.integration_service.update_digest_run_stats(
                digest_run, status="failed", error_message="Scout –Ω–µ –Ω–∞—à–µ–ª —Å—Ç–∞—Ç–µ–π"
            )
            return []

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –≤ –±–∞–∑—É
        self.integration_service.save_articles_to_db(digest_run, articles)

        # –≠—Ç–∞–ø 2: Filter - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö
        filtered_articles = self.run_filter_stage(articles)

        if not filtered_articles:
            logger.warning("‚ö†Ô∏è Pipeline –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: Filter –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏")
            self.integration_service.update_digest_run_stats(
                digest_run,
                total_collected=len(articles),
                status="failed",
                error_message="Filter –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏",
            )
            return []

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.integration_service.update_digest_run_stats(
            digest_run,
            total_collected=len(articles),
            total_filtered=len(filtered_articles),
        )

        # –≠—Ç–∞–ø 3: Copywriter - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 8)
        articles_with_posts = self.run_copywriter_stage(filtered_articles, max_posts=8)

        if not articles_with_posts:
            logger.warning(
                "‚ö†Ô∏è Pipeline –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: Copywriter –Ω–µ —Å–æ–∑–¥–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"
            )
            self.integration_service.update_digest_run_stats(
                digest_run,
                total_collected=len(articles),
                total_filtered=len(filtered_articles),
                status="failed",
                error_message="Copywriter –Ω–µ —Å–æ–∑–¥–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞",
            )
            return []

        # –≠—Ç–∞–ø 4: Image Generator - —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        final_articles = self.run_image_generator_stage(articles_with_posts)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.integration_service.save_generated_posts(final_articles)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        successful_images = len([a for a in final_articles if a.get("image_path")])
        self.integration_service.update_digest_run_stats(
            digest_run,
            total_collected=len(articles),
            total_filtered=len(filtered_articles),
            total_posts=len(articles_with_posts),
            total_images=successful_images,
            status="completed",
        )

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("üéâ Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(articles)} —Å–æ–±—Ä–∞–Ω–æ ‚Üí {len(filtered_articles)} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ‚Üí {len(articles_with_posts)} –ø–æ—Å—Ç–æ–≤ ‚Üí {successful_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
        )

        return final_articles


def run_news_pipeline(
    keywords: List[str],
    deepseek_api_key: str,
    google_api: Optional[str] = None,
    google_cse: Optional[str] = None,
    rss_feeds: Optional[List[str]] = None,
    rss_hours: int = 72,
    max_per_source: int = 5,
    image_config: Optional[Dict] = None,
    save_to_markdown: bool = True,
    markdown_file: str = "news_digest.md",
) -> List[Dict[str, str]]:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.

    Args:
        keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        deepseek_api_key: API –∫–ª—é—á DeepSeek
        google_api: Google API –∫–ª—é—á
        google_cse: Google Custom Search Engine ID
        rss_feeds: –°–ø–∏—Å–æ–∫ RSS –ª–µ–Ω—Ç
        rss_hours: –ü–µ—Ä–∏–æ–¥ –≤ —á–∞—Å–∞—Ö –¥–ª—è RSS —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        max_per_source: –ú–∞–∫—Å–∏–º—É–º —Å—Ç–∞—Ç–µ–π —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        image_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        save_to_markdown: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ markdown —Ñ–∞–π–ª
        markdown_file: –ü—É—Ç—å –∫ markdown —Ñ–∞–π–ª—É

    Returns:
        List[Dict]: –ì–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    """
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—É—Å–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    digest_run = integration_service.create_digest_run()

    pipeline = NewsPipeline(
        deepseek_api_key=deepseek_api_key,
        image_config=image_config,
    )

    results = pipeline.run_full_pipeline(
        keywords=keywords,
        google_api=google_api,
        google_cse=google_cse,
        rss_feeds=rss_feeds,
        rss_hours=rss_hours,
        max_per_source=max_per_source,
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ markdown —Ñ–∞–π–ª
    if save_to_markdown and results:
        digest_service = DigestService()
        digest_service.save_news_to_markdown(results, markdown_file)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        integration_service.save_generated_posts(results)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        successful_images = len([a for a in results if a.get("image_path")])
        integration_service.update_digest_run_stats(
            digest_run,
            total_collected=len(
                results
            ),  # This is a simplification, in reality we'd track all stages
            total_filtered=len(results),
            total_posts=len(results),
            total_images=successful_images,
            status="completed",
        )

    return results


def run_news_pipeline_with_tracking(
    keywords: List[str],
    deepseek_api_key: str,
    google_api: Optional[str] = None,
    google_cse: Optional[str] = None,
    rss_feeds: Optional[List[str]] = None,
    rss_hours: int = 72,
    max_per_source: int = 5,
    image_config: Optional[Dict] = None,
    save_to_markdown: bool = True,
    markdown_file: str = "news_digest.md",
) -> Dict[str, List[Dict[str, str]]]:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞.

    Args:
        keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        deepseek_api_key: API –∫–ª—é—á DeepSeek
        google_api: Google API –∫–ª—é—á
        google_cse: Google Custom Search Engine ID
        rss_feeds: –°–ø–∏—Å–æ–∫ RSS –ª–µ–Ω—Ç
        rss_hours: –ü–µ—Ä–∏–æ–¥ –≤ —á–∞—Å–∞—Ö –¥–ª—è RSS —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        max_per_source: –ú–∞–∫—Å–∏–º—É–º —Å—Ç–∞—Ç–µ–π —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        image_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        save_to_markdown: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ markdown —Ñ–∞–π–ª
        markdown_file: –ü—É—Ç—å –∫ markdown —Ñ–∞–π–ª—É

    Returns:
        Dict: {
            "all_news": –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏,
            "filtered_news": –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏,
            "final_posts": —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã
        }
    """
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—É—Å–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    digest_run = integration_service.create_digest_run()

    pipeline = NewsPipeline(
        deepseek_api_key=deepseek_api_key,
        image_config=image_config,
    )

    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º")

    # –≠—Ç–∞–ø 1: Scout - —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π (–≤–∫–ª—é—á–∞–µ—Ç –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é)
    all_news = pipeline.run_scout_stage(
        keywords=keywords,
        google_api=google_api,
        google_cse=google_cse,
        rss_feeds=rss_feeds,
        rss_hours=rss_hours,
        max_per_source=max_per_source,
    )

    if not all_news:
        logger.warning("‚ö†Ô∏è Pipeline –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: Scout –Ω–µ –Ω–∞—à–µ–ª —Å—Ç–∞—Ç–µ–π")
        integration_service.update_digest_run_stats(
            digest_run, status="failed", error_message="Scout –Ω–µ –Ω–∞—à–µ–ª —Å—Ç–∞—Ç–µ–π"
        )
        return {"all_news": [], "filtered_news": [], "final_posts": []}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –≤ –±–∞–∑—É
    integration_service.save_articles_to_db(digest_run, all_news)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∞—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ)
    all_news_with_filter = filter_service.get_all_articles_with_filter_results(
        all_news, pipeline.deepseek_api_key
    )

    # –≠—Ç–∞–ø 2: Filter - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö
    filtered_news = pipeline.run_filter_stage(all_news)

    if not filtered_news:
        logger.warning("‚ö†Ô∏è Pipeline –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: Filter –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏")
        integration_service.update_digest_run_stats(
            digest_run,
            total_collected=len(all_news),
            status="failed",
            error_message="Filter –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏",
        )
        return {
            "all_news": all_news_with_filter,
            "filtered_news": [],
            "final_posts": [],
        }

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    integration_service.update_digest_run_stats(
        digest_run, total_collected=len(all_news), total_filtered=len(filtered_news)
    )

    # –≠—Ç–∞–ø 3: Copywriter - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 8 —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö)
    articles_with_posts = pipeline.run_copywriter_stage(filtered_news, max_posts=8)

    if not articles_with_posts:
        logger.warning("‚ö†Ô∏è Pipeline –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: Copywriter –Ω–µ —Å–æ–∑–¥–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞")
        integration_service.update_digest_run_stats(
            digest_run,
            total_collected=len(all_news),
            total_filtered=len(filtered_news),
            status="failed",
            error_message="Copywriter –Ω–µ —Å–æ–∑–¥–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞",
        )
        return {
            "all_news": all_news_with_filter,
            "filtered_news": filtered_news,
            "final_posts": [],
        }

    # –≠—Ç–∞–ø 4: Image Generator - —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    final_posts = pipeline.run_image_generator_stage(articles_with_posts)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ markdown —Ñ–∞–π–ª
    if save_to_markdown and final_posts:
        digest_service = DigestService()
        digest_service.save_news_to_markdown(final_posts, markdown_file)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    integration_service.save_generated_posts(final_posts)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    successful_images = len([a for a in final_posts if a.get("image_path")])
    integration_service.update_digest_run_stats(
        digest_run,
        total_collected=len(all_news),
        total_filtered=len(filtered_news),
        total_posts=len(articles_with_posts),
        total_images=successful_images,
        status="completed",
    )

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("üéâ Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    logger.info(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(all_news)} —Å–æ–±—Ä–∞–Ω–æ ‚Üí {len(filtered_news)} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ‚Üí {len(articles_with_posts)} –ø–æ—Å—Ç–æ–≤ ‚Üí {successful_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
    )

    return {
        "all_news": all_news_with_filter,  # –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        "filtered_news": filtered_news,
        "final_posts": final_posts,
    }
