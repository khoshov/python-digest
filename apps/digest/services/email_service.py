import smtplib
from pathlib import Path
from typing import List, Dict, Optional
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
from datetime import datetime

from config import settings
from logger.logger import setup_logger

logger = setup_logger(module_name=__name__)


class EmailService:
    """
    –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ SMM pipeline.
    """

    def create_email_content(
        self, posts: List[Dict[str, str]], total_count: int
    ) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ pipeline.

        Args:
            posts: –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            total_count: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤

        Returns:
            str: HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
        """
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background-color: #306998; color: white; padding: 20px; border-radius: 5px; margin-bottom: 20px; }}
                .post {{ border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 5px; }}
                .post-title {{ font-size: 18px; font-weight: bold; color: #306998; margin-bottom: 5px; }}
                .post-type {{ font-size: 14px; color: #666; margin-bottom: 10px; font-style: italic; }}
                .post-url {{ color: #0066cc; text-decoration: none; }}
                .post-content {{ margin-top: 10px; padding: 10px; background-color: #f9f9f9; border-radius: 3px; }}
                .stats {{ background-color: #e8f5e8; padding: 15px; border-radius: 5px; margin-bottom: 20px; }}
                .footer {{ margin-top: 30px; padding: 15px; background-color: #f5f5f5; border-radius: 5px; text-align: center; }}
                .python-accent {{ color: #306998; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üêç Python Digest - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç</h1>
                <p>–õ—É—á—à–µ–µ –∏–∑ –º–∏—Ä–∞ Python-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é</p>
                <p>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime("%d.%m.%Y –≤ %H:%M")}</p>
            </div>

            <div class="stats">
                <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞</h2>
                <ul>
                    <li><strong>–í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –æ—Ç–æ–±—Ä–∞–Ω–æ:</strong> {total_count}</li>
                    <li><strong>–ü–µ—Ä–∏–æ–¥ —Å–±–æ—Ä–∞:</strong> –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π</li>
                    <li><strong>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</strong> Python-—Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –±–ª–æ–≥–∏, –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –ª–µ–Ω—Ç—ã</li>
                    <li><strong>–ü–æ—Å—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:</strong> {len([p for p in posts if p.get("image_path")])}</li>
                </ul>
            </div>
        """

        if posts:
            html_content += "<h2>üêç Python-–º–∞—Ç–µ—Ä–∏–∞–ª—ã —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏):</h2>"

            for idx, post in enumerate(posts, 1):
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
                title = post.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")[:100]  # –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤
                post_type = post.get(
                    "content_type", "–ú–∞—Ç–µ—Ä–∏–∞–ª"
                )  # –¢–∏–ø: —Å—Ç–∞—Ç—å—è, –Ω–æ–≤–æ—Å—Ç—å, –≤–∏–¥–µ–æ –∏ —Ç.–¥.
                description = post.get("description", post.get("post_content", ""))[
                    :350
                ]  # –ú–∞–∫—Å–∏–º—É–º 350 —Å–∏–º–≤–æ–ª–æ–≤
                url = post.get("url", "#")

                html_content += f"""
                <div class="post">
                    <div class="post-title">{idx}. {title}</div>
                    <div class="post-type">–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {post_type}</div>
                    <div class="post-content">
                        {description.replace(chr(10), "<br>")}
                    </div>
                    <p style="margin-top: 15px;">
                        <strong>üîó –°—Å—ã–ª–∫–∞:</strong> <a href="{url}" class="post-url">{url}</a>
                    </p>
                    {f"<p><strong>üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</strong> {Path(post['image_path']).name}</p>" if post.get("image_path") else ""}
                </div>
                """
        else:
            html_content += """
            <div class="post">
                <p>üòî –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö Python-–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.</p>
                <p>üí° –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞.</p>
            </div>
            """

        html_content += """
            <div class="footer">
                <p><span class="python-accent">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ Python Digest Pipeline</span></p>
                <p>üêçü§ñ Powered by Python & AI</p>
                <p style="font-size: 12px; color: #666;">
                    –î–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ Python ‚Ä¢ –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é ‚Ä¢ –°–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ
                </p>
            </div>
        </body>
        </html>
        """

        return html_content

    def send_email_notification(
        self,
        posts: List[Dict[str, str]],
        markdown_file: Optional[Path] = None,
        summary_file: Optional[Path] = None,
        comprehensive_report: Optional[Path] = None,
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ pipeline.

        Args:
            posts: –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            markdown_file: –ü—É—Ç—å –∫ markdown —Ñ–∞–π–ª—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            summary_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–æ–π
            comprehensive_report: –ü—É—Ç—å –∫ –ø–æ–¥—Ä–æ–±–Ω–æ–º—É –æ—Ç—á–µ—Ç—É

        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        if not settings.enable_email_sending:
            logger.info("üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return True

        if not settings.email_recipients:
            logger.warning("üìß –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ email")
            return False

        try:
            logger.info("üìß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")

            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = MIMEMultipart("alternative")
            msg["From"] = settings.email_from or settings.smtp_username
            msg["To"] = ", ".join(settings.email_recipients)
            msg["Subject"] = (
                f"{settings.email_subject} ({datetime.now().strftime('%d.%m.%Y %H:%M')})"
            )

            # –°–æ–∑–¥–∞–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            html_content = self.create_email_content(posts, len(posts))
            html_part = MIMEText(html_content, "html", "utf-8")
            msg.attach(html_part)

            # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            attachments_added = 0

            if markdown_file and markdown_file.exists():
                with open(markdown_file, "rb") as attachment:
                    part = MIMEBase("application", "octet-stream")
                    part.set_payload(attachment.read())
                    encoders.encode_base64(part)
                    part.add_header(
                        "Content-Disposition",
                        f"attachment; filename= {markdown_file.name}",
                    )
                    msg.attach(part)
                    attachments_added += 1

            if summary_file and summary_file.exists():
                with open(summary_file, "rb") as attachment:
                    part = MIMEBase("application", "octet-stream")
                    part.set_payload(attachment.read())
                    encoders.encode_base64(part)
                    part.add_header(
                        "Content-Disposition",
                        f"attachment; filename= {summary_file.name}",
                    )
                    msg.attach(part)
                    attachments_added += 1

            if comprehensive_report and comprehensive_report.exists():
                with open(comprehensive_report, "rb") as attachment:
                    part = MIMEBase("application", "octet-stream")
                    part.set_payload(attachment.read())
                    encoders.encode_base64(part)
                    part.add_header(
                        "Content-Disposition",
                        f"attachment; filename= {comprehensive_report.name}",
                    )
                    msg.attach(part)
                    attachments_added += 1

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            logger.info(
                f"üìß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É: {settings.smtp_server}:{settings.smtp_port}"
            )

            try:
                with smtplib.SMTP(
                    settings.smtp_server, settings.smtp_port, timeout=30
                ) as server:
                    if settings.smtp_use_tls:
                        logger.debug("üìß –í–∫–ª—é—á–∞–µ–º TLS...")
                        server.starttls()

                    if settings.smtp_username and settings.smtp_password:
                        logger.debug("üìß –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
                        server.login(settings.smtp_username, settings.smtp_password)

                    text = msg.as_string()
                    logger.debug("üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ...")
                    server.sendmail(msg["From"], settings.email_recipients, text)

            except smtplib.SMTPConnectError as e:
                logger.error(f"üìß –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É: {e}")
                logger.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP_SERVER –∏ SMTP_PORT")
                return False
            except smtplib.SMTPAuthenticationError as e:
                logger.error(f"üìß –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ SMTP: {e}")
                logger.error(
                    "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SMTP_USERNAME –∏ SMTP_PASSWORD (–¥–ª—è Gmail –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ App Password)"
                )
                return False
            except smtplib.SMTPException as e:
                logger.error(f"üìß SMTP –æ—à–∏–±–∫–∞: {e}")
                return False
            except ConnectionError as e:
                logger.error(f"üìß –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                logger.error(
                    "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞"
                )
                return False

            logger.success("üìß Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            logger.info(f"   üì§ –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {', '.join(settings.email_recipients)}")
            logger.info(f"   üìé –í–ª–æ–∂–µ–Ω–∏–π: {attachments_added}")
            logger.info(f"   üìä –ü–æ—Å—Ç–æ–≤ –≤ –æ—Ç—á–µ—Ç–µ: {len(posts)}")

            return True

        except Exception as e:
            logger.error(f"üìß –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
            logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
            return False

    def validate_email_configuration(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ email.

        Returns:
            bool: True –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        """
        if not settings.enable_email_sending:
            return True

        missing = []

        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not settings.smtp_server:
            missing.append("SMTP_SERVER")
        if not settings.smtp_username:
            missing.append("SMTP_USERNAME")
        if not settings.smtp_password:
            missing.append("SMTP_PASSWORD")
        if not settings.email_recipients:
            missing.append("EMAIL_RECIPIENTS")

        if missing:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email: {', '.join(missing)}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º email –∞–¥—Ä–µ—Å–∞
        invalid_emails = []
        for email in settings.email_recipients:
            if "@" not in email or "." not in email:
                invalid_emails.append(email)

        if invalid_emails:
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ email –∞–¥—Ä–µ—Å–∞: {', '.join(invalid_emails)}")
            return False

        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        return True
