# Generated by Django 5.2.7 on 2025-10-26 16:04

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ArticleSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Название RSS ленты (например, 'Python.org Blog')", max_length=200, verbose_name='Название RSS источника')),
                ('url', models.URLField(blank=True, help_text='Полный URL RSS/Atom фида (не обычная веб-страница!).\nПримеры:\n• https://www.python.org/feeds/python.rss/\n• https://habr.com/ru/rss/all/\n• https://realpython.com/atom.xml', max_length=500, null=True, verbose_name='URL RSS ленты')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('priority', models.IntegerField(default=1, help_text='1 - самый высокий приоритет', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Приоритет')),
                ('last_collected', models.DateTimeField(blank=True, null=True, verbose_name='Последний сбор')),
                ('articles_count', models.IntegerField(default=0, verbose_name='Всего собрано статей')),
                ('success_rate', models.FloatField(default=0, help_text='Процент статей из этого источника, которые были опубликованы', verbose_name='Процент успешных публикаций')),
            ],
            options={
                'verbose_name': 'RSS источник',
                'verbose_name_plural': 'RSS источники',
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DigestRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата запуска')),
                ('finished_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата завершения')),
                ('status', models.CharField(choices=[('running', 'Запущен'), ('completed', 'Завершен'), ('failed', 'Ошибка'), ('partial', 'Частично завершен')], default='running', max_length=20, verbose_name='Статус')),
                ('total_articles_collected', models.IntegerField(default=0, verbose_name='Всего собрано статей')),
                ('total_articles_filtered', models.IntegerField(default=0, verbose_name='Статей прошло фильтр')),
                ('total_posts_created', models.IntegerField(default=0, verbose_name='Создано постов')),
                ('total_images_generated', models.IntegerField(default=0, verbose_name='Сгенерировано изображений')),
                ('error_message', models.TextField(blank=True, null=True, verbose_name='Сообщение об ошибке')),
                ('markdown_file', models.FileField(blank=True, null=True, upload_to='digest/results/%Y/%m/%d/', verbose_name='Markdown файл с результатами')),
                ('report_file', models.FileField(blank=True, null=True, upload_to='digest/reports/%Y/%m/%d/', verbose_name='Подробный отчет')),
            ],
            options={
                'verbose_name': 'Запуск дайджеста',
                'verbose_name_plural': 'Запуски дайджестов',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название конфигурации')),
                ('filter_system_prompt', models.TextField(default='Ты эксперт по Python разработке, который помогает фильтровать контент для технического дайджеста.', help_text='Системный промпт для агента фильтрации статей', verbose_name='System prompt для фильтра')),
                ('filter_user_prompt', models.TextField(default='Проанализируй следующую статью и определи её релевантность для Python Digest - еженедельной рассылки для Python разработчиков.\n\nЗаголовок: {title}\nКраткое содержание: {summary}\nURL: {url}\n\nСтатья релевантна, если она касается Python разработки, новостей Python сообщества, библиотек, инструментов, туториалов или событий.\n\n{format_instructions}', help_text='Промпт для пользователя в агенте фильтрации. Доступные переменные: {title}, {summary}, {url}, {format_instructions}', verbose_name='User prompt для фильтра')),
                ('copywriter_system_prompt', models.TextField(default='Ты опытный копирайтер технического контента для Python разработчиков. Пишешь лаконично, интересно и с хорошим чувством юмора.', help_text='Системный промпт для агента создания постов', verbose_name='System prompt для копирайтера')),
                ('copywriter_user_prompt', models.TextField(default='Создай Telegram-пост на русском языке для Python Digest по следующей статье:\n\nЗаголовок: {title}\nКраткое содержание: {summary}\nСсылка: {url}\n\nТребования к посту:\n- Текст на русском языке\n- Формат Telegram Markdown (можно использовать жирный, курсив, ссылки)\n- Не более 500 символов\n- Захватывающий, но информативный стиль\n- Включи эмодзи для визуальной привлекательности\n- Добавь ссылку в конце поста\n\n{format_instructions}', help_text='Промпт для пользователя в агенте копирайтинга. Доступные переменные: {title}, {summary}, {url}, {format_instructions}', verbose_name='User prompt для копирайтера')),
                ('rss_hours_period', models.IntegerField(default=168, help_text='За какой период собирать RSS (по умолчанию 168 = 7 дней, максимум 30 дней)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(720)], verbose_name='Период RSS (часы)')),
                ('max_articles_per_source', models.IntegerField(default=20, help_text='Лимит статей с одного источника за запуск', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Максимум статей с источника')),
                ('max_final_posts', models.IntegerField(default=8, help_text='Сколько ТОП статей выбирать для публикации', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)], verbose_name='Максимум финальных постов')),
                ('enable_google_news', models.BooleanField(default=False, help_text='Поиск статей через Google CSE по ключевым словам (настраиваются ниже)', verbose_name='Включить Google Custom Search')),
                ('enable_rss_news', models.BooleanField(default=True, help_text='Сбор статей из RSS лент (источники настраиваются ниже)', verbose_name='Включить RSS сбор')),
                ('generate_images', models.BooleanField(default=False, verbose_name='Генерировать изображения')),
                ('enable_email_sending', models.BooleanField(default=False, verbose_name='Включить отправку email')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активная конфигурация')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Проект',
                'verbose_name_plural': 'Проекты',
                'db_table': 'digest_configuration',
                'ordering': ['-is_active', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500, verbose_name='Заголовок')),
                ('url', models.URLField(max_length=1000, verbose_name='URL статьи')),
                ('summary', models.TextField(blank=True, null=True, verbose_name='Краткое содержание')),
                ('content_type', models.CharField(choices=[('tutorial', 'Туториал'), ('news', 'Новость'), ('library', 'Библиотека/Инструмент'), ('event', 'Событие'), ('opinion', 'Мнение'), ('meme', 'Мем/Юмор'), ('other', 'Другое')], default='other', max_length=20, verbose_name='Тип контента')),
                ('interest_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Оценка интереса')),
                ('is_relevant', models.BooleanField(default=False, verbose_name='Релевантен')),
                ('relevance_reason', models.TextField(blank=True, null=True, verbose_name='Причина релевантности')),
                ('interest_reason', models.TextField(blank=True, null=True, verbose_name='Причина интереса')),
                ('collected_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата сбора')),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='digest.articlesource', verbose_name='Источник')),
                ('digest_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articles', to='digest.digestrun', verbose_name='Запуск дайджеста')),
            ],
            options={
                'verbose_name': 'Статья',
                'verbose_name_plural': 'Статьи',
                'ordering': ['-interest_score', '-collected_at'],
            },
        ),
        migrations.CreateModel(
            name='GeneratedPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(choices=[('telegram', 'Telegram'), ('twitter', 'Twitter/X'), ('linkedin', 'LinkedIn'), ('instagram', 'Instagram'), ('general', 'Общий')], default='general', max_length=20, verbose_name='Платформа')),
                ('post_content', models.TextField(verbose_name='Текст поста')),
                ('image_idea', models.TextField(blank=True, null=True, verbose_name='Идея для изображения')),
                ('image_path', models.ImageField(blank=True, null=True, upload_to='digest/images/%Y/%m/%d/', verbose_name='Изображение')),
                ('generated_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата генерации')),
                ('is_published', models.BooleanField(default=False, verbose_name='Опубликован')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата публикации')),
                ('article', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='generated_post', to='digest.article', verbose_name='Статья')),
            ],
            options={
                'verbose_name': 'Сгенерированный пост',
                'verbose_name_plural': 'Сгенерированные посты',
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyword', models.CharField(help_text='Ключевое слово для поиска через Google Custom Search', max_length=200, verbose_name='Ключевое слово (для Google CSE)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активно')),
                ('priority', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Приоритет')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='keywords', to='digest.project', verbose_name='Проект')),
            ],
            options={
                'verbose_name': 'Ключевое слово (Google CSE)',
                'verbose_name_plural': 'Ключевые слова (Google CSE)',
                'ordering': ['priority', 'keyword'],
            },
        ),
        migrations.AddField(
            model_name='articlesource',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='digest.project', verbose_name='Проект'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['digest_run', 'is_relevant'], name='digest_arti_digest__95f226_idx'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['interest_score'], name='digest_arti_interes_cafa11_idx'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['collected_at'], name='digest_arti_collect_9d049e_idx'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['source', 'collected_at'], name='digest_arti_source__8ab837_idx'),
        ),
        migrations.AddConstraint(
            model_name='article',
            constraint=models.UniqueConstraint(fields=('digest_run', 'url'), name='unique_article_per_digest'),
        ),
        migrations.AddIndex(
            model_name='generatedpost',
            index=models.Index(fields=['platform', 'is_published'], name='digest_gene_platfor_6a3bc0_idx'),
        ),
        migrations.AddIndex(
            model_name='generatedpost',
            index=models.Index(fields=['generated_at'], name='digest_gene_generat_de05ca_idx'),
        ),
        migrations.AddIndex(
            model_name='keyword',
            index=models.Index(fields=['project', 'is_active', 'priority'], name='digest_keyw_project_e57761_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='keyword',
            unique_together={('project', 'keyword')},
        ),
        migrations.AddIndex(
            model_name='articlesource',
            index=models.Index(fields=['project', 'is_active', 'priority'], name='digest_arti_project_f68c0a_idx'),
        ),
    ]
