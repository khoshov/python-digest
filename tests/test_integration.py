#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –º–æ–¥–µ–ª—è–º–∏ Django.
"""

import os
import sys
import django
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ sys.path
project_dir = Path(__file__).resolve().parent.parent
sys.path.append(str(project_dir))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Django
django.setup()

from loguru import logger
from apps.digest.services.integration_service import IntegrationService
from apps.digest.models import DigestRun


def test_integration():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –º–æ–¥–µ–ª—è–º–∏")

    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    integration_service = IntegrationService()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    logger.info("–¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
    digest_run = integration_service.create_digest_run()
    print(f"–°–æ–∑–¥–∞–Ω –∑–∞–ø—É—Å–∫: {digest_run.id}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    logger.info("–¢–µ—Å—Ç: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞")
    integration_service.update_digest_run_stats(
        digest_run,
        total_collected=10,
        total_filtered=3,
        total_posts=3,
        total_images=2,
        status="completed",
    )
    print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞: {digest_run.id}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    logger.info("–¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
    source = integration_service.get_or_create_news_source(
        "–¢–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫", "https://test.com", "manual"
    )
    print(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source.name}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π
    logger.info("–¢–µ—Å—Ç: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π")
    test_articles = [
        {
            "title": "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è 1",
            "url": "https://test.com/article1",
            "summary": "–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ 1",
            "content_type": "news",
            "interest_score": 8.5,
            "is_relevant": True,
            "relevance_reason": "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞",
            "interest_reason": "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞",
        },
        {
            "title": "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è 2",
            "url": "https://test.com/article2",
            "summary": "–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ 2",
            "content_type": "tutorial",
            "interest_score": 7.2,
            "is_relevant": True,
            "relevance_reason": "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞",
            "interest_reason": "–ü–æ–ª–µ–∑–Ω–∞",
        },
    ]

    saved_articles = integration_service.save_articles_to_db(
        digest_run, test_articles, source
    )
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(saved_articles)}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
    logger.info("–¢–µ—Å—Ç: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤")
    test_posts = [
        {
            "title": "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è 1",
            "url": "https://test.com/article1",
            "post_content": "–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ 1",
            "image_idea": "–ò–¥–µ—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 1",
            "image_path": "/path/to/image1.png",
        }
    ]

    saved_posts = integration_service.save_generated_posts(test_posts)
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(saved_posts)}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    logger.info("–¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    config = integration_service.get_active_configuration()
    if config:
        print(f"–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.name}")
    else:
        print("–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    logger.info("–¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
    keywords = integration_service.get_active_keywords()
    print(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")

    logger.info("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    total_runs = DigestRun.objects.count()
    print(f"–í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤ –≤ –±–∞–∑–µ: {total_runs}")


if __name__ == "__main__":
    test_integration()
