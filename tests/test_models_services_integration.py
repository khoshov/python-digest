#!/usr/bin/env python
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π –∏ —Å–µ—Ä–≤–∏—Å–æ–≤.
"""

import os
import sys
import django
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ sys.path
project_dir = Path(__file__).resolve().parent.parent
sys.path.append(str(project_dir))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Django
django.setup()

from loguru import logger
from apps.digest.services.integration_service import IntegrationService
from apps.digest.models import (
    DigestRun,
    NewsSource,
    Article,
    GeneratedPost,
    Configuration,
    Keyword,
)


def test_models_services_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π –∏ —Å–µ—Ä–≤–∏—Å–æ–≤."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π –∏ —Å–µ—Ä–≤–∏—Å–æ–≤")

    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        integration_service = IntegrationService()

        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        logger.info("–¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
        digest_run = integration_service.create_digest_run()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–ø—É—Å–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {digest_run.id}")

        # –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞
        logger.info("–¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞")
        integration_service.update_digest_run_stats(
            digest_run,
            total_collected=10,
            total_filtered=5,
            total_posts=3,
            total_images=2,
            status="completed",
        )
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞: {digest_run.id}")

        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        logger.info("–¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
        source = integration_service.get_or_create_news_source(
            "–¢–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫", "https://test.com", "manual"
        )
        print(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π: {source.name}")

        # –¢–µ—Å—Ç 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π
        logger.info("–¢–µ—Å—Ç 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π")
        test_articles = [
            {
                "title": "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è 1",
                "url": "https://test.com/article1",
                "summary": "–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ 1",
                "content_type": "news",
                "interest_score": 8.5,
                "is_relevant": True,
                "relevance_reason": "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞",
                "interest_reason": "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞",
                "source": "–¢–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫",
            },
            {
                "title": "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è 2",
                "url": "https://test.com/article2",
                "summary": "–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ 2",
                "content_type": "tutorial",
                "interest_score": 7.2,
                "is_relevant": True,
                "relevance_reason": "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞",
                "interest_reason": "–ü–æ–ª–µ–∑–Ω–∞",
                "source": "–¢–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫",
            },
        ]

        saved_articles = integration_service.save_articles_to_db(
            digest_run, test_articles, source
        )
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(saved_articles)}")

        # –¢–µ—Å—Ç 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
        logger.info("–¢–µ—Å—Ç 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤")
        test_posts = [
            {
                "title": "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è 1",
                "url": "https://test.com/article1",
                "post_content": "–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ 1",
                "image_idea": "–ò–¥–µ—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 1",
                "image_path": "/path/to/image1.png",
            }
        ]

        saved_posts = integration_service.save_generated_posts(test_posts)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(saved_posts)}")

        # –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info("–¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not Configuration.objects.filter(is_active=True).exists():
            config = Configuration.objects.create(
                name="–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
                flowise_host="http://localhost:3000",
                flowise_filter_id="test_filter",
                flowise_copywriter_id="test_copywriter",
                is_active=True,
            )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.name}")

        config = integration_service.get_active_configuration()
        if config:
            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.name}")
        else:
            print("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        logger.info("–¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not Keyword.objects.filter(is_active=True).exists():
            keywords_list = ["Python", "Django", "AI", "machine learning"]
            for kw in keywords_list:
                Keyword.objects.get_or_create(keyword=kw, defaults={"is_active": True})
            print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")

        keywords = integration_service.get_active_keywords()
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")

        # –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
        logger.info("–¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ")
        total_runs = DigestRun.objects.count()
        total_sources = NewsSource.objects.count()
        total_articles = Article.objects.count()
        total_posts = GeneratedPost.objects.count()

        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   - –ó–∞–ø—É—Å–∫–æ–≤ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {total_runs}")
        print(f"   - –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_sources}")
        print(f"   - –°—Ç–∞—Ç–µ–π: {total_articles}")
        print(f"   - –ü–æ—Å—Ç–æ–≤: {total_posts}")

        logger.info("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π –∏ —Å–µ—Ä–≤–∏—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {e}")
        raise


if __name__ == "__main__":
    test_models_services_integration()
